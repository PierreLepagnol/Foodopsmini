#!/usr/bin/env python3
"""
D√©monstration des nouvelles fonctionnalit√©s FoodOps Pro.
"""

from decimal import Decimal
from foodops_pro.ui.console_ui import ConsoleUI
from foodops_pro.domain.commerce import CommerceManager
from foodops_pro.admin.admin_config import AdminSettings
from foodops_pro.io.data_loader import DataLoader


def demo_interface():
    """D√©monstration de l'interface."""
    print("=== D√âMONSTRATION INTERFACE PROFESSIONNELLE ===")

    ui = ConsoleUI()

    # Test d'affichage de bo√Æte
    welcome = [
        "üçΩÔ∏è FOODOPS PRO 2024 üçΩÔ∏è",
        "",
        "Simulateur de Gestion de Restaurant",
        "Version √âducative Professionnelle",
        "",
        "Bienvenue dans la nouvelle interface !",
    ]

    ui.print_box(welcome, "BIENVENUE", "header")
    print()

    # Test de menu
    options = [
        "Voir les fonds de commerce",
        "Configuration administrateur",
        "Rapports financiers",
        "Quitter",
    ]

    print("Exemple de menu professionnel:")
    choice = ui.show_menu("MENU PRINCIPAL", options, allow_back=False)
    print(f"Choix s√©lectionn√©: {choice}")


def demo_commerce():
    """D√©monstration du syst√®me de commerce."""
    print("\n=== D√âMONSTRATION FONDS DE COMMERCE ===")

    ui = ConsoleUI()
    manager = CommerceManager()

    # Affichage des commerces disponibles
    budget = Decimal("60000")
    locations = manager.get_available_locations(budget)

    commerce_info = [f"FONDS DE COMMERCE DISPONIBLES (Budget: {budget:,.0f}‚Ç¨)", ""]

    for i, location in enumerate(locations[:3], 1):  # Top 3
        commerce_info.extend(
            [
                f"{i}. {location.name}",
                f"   üìç {location.location_type.value.replace('_', ' ').title()}",
                f"   üí∞ {location.price:,.0f}‚Ç¨ + {location.renovation_cost:,.0f}‚Ç¨ r√©novation",
                f"   üè† {location.size} couverts - {location.foot_traffic} passage",
                f"   üè¢ {location.rent_monthly:,.0f}‚Ç¨/mois",
                "",
            ]
        )

    ui.print_box(commerce_info, style="info")


def demo_admin_config():
    """D√©monstration de la configuration admin."""
    print("\n=== D√âMONSTRATION CONFIGURATION ADMIN ===")

    ui = ConsoleUI()
    settings = AdminSettings()

    # Affichage de la configuration par d√©faut
    config_info = [
        "CONFIGURATION ADMINISTRATEUR PAR D√âFAUT:",
        "",
        f"üìã Session: {settings.session_name}",
        f"üë• Joueurs max: {settings.max_players}",
        f"üí∞ Budget: {settings.starting_budget_min:,.0f}‚Ç¨ - {settings.starting_budget_max:,.0f}‚Ç¨",
        f"‚è±Ô∏è Dur√©e: {settings.total_turns} tours",
        f"ü§ñ IA: {settings.ai_count} concurrent(s) - {settings.ai_difficulty}",
        "",
        f"üé≤ √âv√©nements al√©atoires: {'‚úÖ' if settings.enable_random_events else '‚ùå'}",
        f"üìà Effets saisonniers: {'‚úÖ' if settings.enable_seasonal_effects else '‚ùå'}",
        f"üìä Notation: {'‚úÖ' if settings.enable_scoring else '‚ùå'}",
        "",
        "Le professeur peut modifier tous ces param√®tres !",
    ]

    ui.print_box(config_info, "MODE PROFESSEUR", "success")


def demo_scenario():
    """D√©monstration du sc√©nario."""
    print("\n=== D√âMONSTRATION SC√âNARIO ===")

    ui = ConsoleUI()

    try:
        loader = DataLoader()
        data = loader.load_all_data()
        scenario = data["scenario"]

        # Affichage du sc√©nario comme dans le jeu
        ui.show_welcome_screen(scenario, admin_mode=False)

    except Exception as e:
        print(f"Erreur lors du chargement du sc√©nario: {e}")


def demo_financial_kpis():
    """D√©monstration des KPIs financiers."""
    print("\n=== D√âMONSTRATION KPIs FINANCIERS ===")

    ui = ConsoleUI()

    # Simulation de KPIs
    kpis = [
        "KPIs M√âTIER EXEMPLE:",
        "",
        "‚Ä¢ Food Cost: 28.5% (Objectif: <30%) ‚úÖ",
        "‚Ä¢ Co√ªt personnel: 32.1% (Objectif: <35%) ‚úÖ",
        "‚Ä¢ Marge brute: 71.5%",
        "‚Ä¢ Marge nette: 12.3%",
        "‚Ä¢ Ticket moyen: 18.45‚Ç¨",
        "‚Ä¢ Taux de rotation: 2.3 (Objectif: >2.0) ‚úÖ",
        "‚Ä¢ Capacit√© utilis√©e: 50 couverts",
        "",
        "üìä Performance: EXCELLENTE",
    ]

    ui.print_box(kpis, "TABLEAU DE BORD", "success")


def demo_compte_resultat():
    """D√©monstration du compte de r√©sultat."""
    print("\n=== D√âMONSTRATION COMPTE DE R√âSULTAT ===")

    ui = ConsoleUI()

    # Exemple de compte de r√©sultat
    pnl = [
        "COMPTE DE R√âSULTAT - RESTAURANT EXEMPLE",
        "P√©riode: Janvier 2024",
        "",
        "PRODUITS D'EXPLOITATION",
        "‚îú‚îÄ Chiffre d'affaires HT              ‚îÇ        28,450.00 ‚Ç¨",
        "‚îú‚îÄ Subventions d'exploitation          ‚îÇ           150.00 ‚Ç¨",
        "‚îî‚îÄ TOTAL PRODUITS                      ‚îÇ        28,600.00 ‚Ç¨",
        "",
        "CHARGES D'EXPLOITATION",
        "‚îú‚îÄ Achats mati√®res premi√®res          ‚îÇ         8,535.00 ‚Ç¨",
        "‚îú‚îÄ Charges externes",
        "‚îÇ  ‚îú‚îÄ Loyer                           ‚îÇ         4,500.00 ‚Ç¨",
        "‚îÇ  ‚îú‚îÄ √âlectricit√©/Gaz                 ‚îÇ           890.00 ‚Ç¨",
        "‚îÇ  ‚îî‚îÄ Assurances                      ‚îÇ           245.00 ‚Ç¨",
        "‚îú‚îÄ Charges de personnel",
        "‚îÇ  ‚îú‚îÄ Salaires bruts                  ‚îÇ         8,200.00 ‚Ç¨",
        "‚îÇ  ‚îî‚îÄ Charges sociales                ‚îÇ         3,444.00 ‚Ç¨",
        "‚îî‚îÄ TOTAL CHARGES                       ‚îÇ        25,814.00 ‚Ç¨",
        "",
        "R√âSULTAT NET                           ‚îÇ         2,786.00 ‚Ç¨",
    ]

    ui.print_box(pnl, style="info")


def main():
    """D√©monstration principale."""
    print("üéÆ D√âMONSTRATION FOODOPS PRO - NOUVELLES FONCTIONNALIT√âS")
    print("=" * 70)

    try:
        # Interface professionnelle
        demo_interface()

        # Syst√®me de commerce
        demo_commerce()

        # Configuration admin
        demo_admin_config()

        # Sc√©nario
        demo_scenario()

        # KPIs financiers
        demo_financial_kpis()

        # Compte de r√©sultat
        demo_compte_resultat()

        print("\n" + "=" * 70)
        print("üéâ D√âMONSTRATION TERMIN√âE !")
        print("\n‚ú® NOUVELLES FONCTIONNALIT√âS IMPL√âMENT√âES:")
        print("  ‚úÖ Interface console professionnelle avec bo√Ætes et couleurs")
        print("  ‚úÖ √âcran d'accueil avec pr√©sentation du sc√©nario")
        print("  ‚úÖ Mode administrateur pour professeurs")
        print("  ‚úÖ Syst√®me d'achat de fonds de commerce r√©aliste")
        print("  ‚úÖ Compte de r√©sultat professionnel")
        print("  ‚úÖ Menu de d√©cisions enrichi")
        print("  ‚úÖ KPIs m√©tier d√©taill√©s")
        print("  ‚úÖ Rapports financiers complets")

        print("\nüöÄ POUR JOUER:")
        print("  python -m src.foodops_pro.cli_pro")
        print("  python -m src.foodops_pro.cli_pro --admin  (mode professeur)")

    except Exception as e:
        print(f"\n‚ùå Erreur durant la d√©monstration: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    main()
