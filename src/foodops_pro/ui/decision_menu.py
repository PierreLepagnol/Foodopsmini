"""
Menu de d√©cisions enrichi pour FoodOps Pro.
"""

from typing import Dict, List, Optional, Tuple
from decimal import Decimal

from ..domain.restaurant import Restaurant
from ..domain.employee import Employee, EmployeePosition, EmployeeContract
from ..domain.random_events import RandomEventManager
from ..domain.stock import StockManager
from ..domain.supplier import Supplier
from ..core.costing import RecipeCostCalculator
from ..core.procurement import ProcurementPlanner, ReceivingService, POLine
from .console_ui import ConsoleUI
from .financial_reports import FinancialReports


class DecisionMenu:
    """Menu de d√©cisions strat√©giques pour les joueurs."""

    def __init__(self, ui: ConsoleUI, cost_calculator: RecipeCostCalculator):
        self.ui = ui
        self.cost_calculator = cost_calculator
        self.financial_reports = FinancialReports(ui)

    def show_decision_menu(self, restaurant: Restaurant, turn: int,
                          available_recipes: Dict, available_employees: List = None) -> Dict[str, any]:
        """
        Affiche le menu de d√©cisions principal et retourne les choix du joueur.

        Returns:
            Dict contenant toutes les d√©cisions prises
        """
        decisions = {}

        while True:
            self.ui.clear_screen()
            self._show_restaurant_status(restaurant, turn)

            menu_options = [
                "üìã Menu & Pricing",
                "üë• Ressources Humaines",
                "üõí Achats & Stocks",
                "üìà Marketing & Commercial",
                "üèóÔ∏è Investissements",
                "üí∞ Finance & Comptabilit√©",
                "üìä Rapports & Analyses",
                "‚úÖ Valider et passer au tour suivant"
            ]

            choice = self.ui.show_menu(
                f"D√âCISIONS - TOUR {turn} - {restaurant.name}",
                menu_options,
                allow_back=False
            )

            if choice == 1:
                self._menu_pricing_decisions(restaurant, available_recipes, decisions)
            elif choice == 2:
                self._hr_decisions(restaurant, available_employees, decisions)
            elif choice == 3:
                self._purchasing_decisions(restaurant, decisions)
            elif choice == 4:
                self._marketing_decisions(restaurant, decisions)
            elif choice == 5:
                self._investment_decisions(restaurant, decisions)
            elif choice == 6:
                self._financial_decisions(restaurant, decisions)
            elif choice == 7:
                self._show_reports(restaurant)
            elif choice == 8:
                if self._validate_decisions(restaurant, decisions):
                    break

        return decisions

    def _show_restaurant_status(self, restaurant: Restaurant, turn: int) -> None:
        """Affiche le statut actuel du restaurant."""
        status = [
            f"üè™ {restaurant.name} ({restaurant.type.value.title()})",
            f"üí∞ Tr√©sorerie: {restaurant.cash:,.0f}‚Ç¨",
            f"üë• Employ√©s: {len(restaurant.employees)}",
            f"üçΩÔ∏è Capacit√©: {restaurant.capacity_current} couverts",
            f"üìä Niveau staffing: {restaurant.staffing_level}/3",
            f"üç¥ Recettes actives: {len(restaurant.get_active_menu())}"
        ]

        # Couleur selon la sant√© financi√®re
        if restaurant.cash > 20000:
            style = "success"
        elif restaurant.cash > 5000:
            style = "warning"
        else:
            style = "error"

        self.ui.print_box(status, f"STATUT - TOUR {turn}", style)

    def _menu_pricing_decisions(self, restaurant: Restaurant,
                               available_recipes: Dict, decisions: Dict) -> None:
        """Gestion du menu et des prix."""
        while True:
            self.ui.clear_screen()

            submenu_options = [
                "üí∞ Modifier les prix",
                "‚ûï Ajouter des plats au menu",
                "‚ûñ Retirer des plats du menu",
                "üìä Analyser la rentabilit√© par plat",
                "üçΩÔ∏è Cr√©er un menu du jour",
                "üìà Voir l'historique des ventes"
            ]

            choice = self.ui.show_menu("MENU & PRICING", submenu_options)

            if choice == 0:
                break
            elif choice == 1:
                self._modify_prices(restaurant, decisions)
            elif choice == 2:
                self._add_recipes(restaurant, available_recipes, decisions)
            elif choice == 3:
                self._remove_recipes(restaurant, decisions)
            elif choice == 4:
                self._analyze_recipe_profitability(restaurant, available_recipes)
            elif choice == 5:
                self._create_daily_menu(restaurant, decisions)
            elif choice == 6:
                self._show_sales_history(restaurant)

    def _modify_prices(self, restaurant: Restaurant, decisions: Dict) -> None:
        """Modification des prix de vente."""
        active_menu = restaurant.get_active_menu()

        if not active_menu:
            self.ui.show_error("Aucune recette active dans le menu.")
            self.ui.pause()
            return

        self.ui.clear_screen()

        # Affichage du menu actuel avec analyse
        menu_analysis = ["MENU ACTUEL ET RENTABILIT√â:"]

        for recipe_id, current_price in active_menu.items():
            if recipe_id in self.cost_calculator.ingredients:  # V√©rification simplifi√©e
                # Calcul du co√ªt (simplifi√© pour la d√©mo)
                estimated_cost = current_price * Decimal("0.35")  # 35% de food cost estim√©
                margin = current_price - estimated_cost
                margin_pct = (margin / current_price * 100) if current_price > 0 else 0

                menu_analysis.append(
                    f"‚Ä¢ {recipe_id}: {current_price:.2f}‚Ç¨ "
                    f"(co√ªt ~{estimated_cost:.2f}‚Ç¨, marge {margin_pct:.1f}%)"
                )

        self.ui.print_box(menu_analysis, style="info")

        # S√©lection de la recette √† modifier
        recipe_list = list(active_menu.keys())
        recipe_choice = self.ui.show_menu(
            "Quelle recette modifier ?",
            [f"{recipe_id} - {active_menu[recipe_id]:.2f}‚Ç¨" for recipe_id in recipe_list]
        )

        if recipe_choice == 0:
            return

        selected_recipe = recipe_list[recipe_choice - 1]
        current_price = active_menu[selected_recipe]

        # Saisie du nouveau prix
        new_price = self.ui.get_input(
            f"Nouveau prix pour {selected_recipe}",
            Decimal,
            min_val=Decimal("1.0"),
            max_val=Decimal("100.0"),
            default=current_price
        )

        if new_price and new_price != current_price:
            if 'price_changes' not in decisions:
                decisions['price_changes'] = {}
            decisions['price_changes'][selected_recipe] = new_price

            # Calcul de l'impact
            change_pct = ((new_price - current_price) / current_price * 100)
            impact_msg = f"Prix modifi√©: {current_price:.2f}‚Ç¨ ‚Üí {new_price:.2f}‚Ç¨ ({change_pct:+.1f}%)"

            if abs(change_pct) > 10:
                impact_msg += "\n‚ö†Ô∏è Changement important - Impact sur la client√®le attendu"

            self.ui.show_success(impact_msg)
            self.ui.pause()

    def _hr_decisions(self, restaurant: Restaurant,
                     available_employees: List, decisions: Dict) -> None:
        """Gestion des ressources humaines."""
        while True:
            self.ui.clear_screen()

            # Affichage de l'√©quipe actuelle
            team_info = [f"√âQUIPE ACTUELLE ({len(restaurant.employees)} employ√©s):"]

            total_cost = Decimal("0")
            for emp in restaurant.employees:
                monthly_cost = emp.salary_gross_monthly * Decimal("1.42")  # Avec charges
                total_cost += monthly_cost
                team_info.append(
                    f"‚Ä¢ {emp.name} ({emp.position.value}) - "
                    f"{emp.contract.value} - {monthly_cost:.0f}‚Ç¨/mois"
                )

            team_info.append(f"")
            team_info.append(f"Co√ªt total √©quipe: {total_cost:.0f}‚Ç¨/mois")

            self.ui.print_box(team_info, style="info")

            submenu_options = [
                "üë§ Recruter un employ√©",
                "‚ùå Licencier un employ√©",
                "üìö Former le personnel",
                "‚è∞ Ajuster les horaires",
                "üí∞ N√©gocier les salaires",
                "üìä Analyser la productivit√©"
            ]

            choice = self.ui.show_menu("RESSOURCES HUMAINES", submenu_options)

            if choice == 0:
                break
            elif choice == 1:
                self._recruit_employee(restaurant, decisions)
            elif choice == 2:
                self._fire_employee(restaurant, decisions)
            elif choice == 3:
                self._train_employees(restaurant, decisions)
            elif choice == 4:
                self._adjust_schedules(restaurant, decisions)
            elif choice == 5:
                self._negotiate_salaries(restaurant, decisions)
            elif choice == 6:
                self._analyze_productivity(restaurant)

    def _recruit_employee(self, restaurant: Restaurant, decisions: Dict) -> None:
        """Recrutement d'un nouvel employ√©."""
        if len(restaurant.employees) >= 10:  # Limite arbitraire
            self.ui.show_error("√âquipe compl√®te (maximum 10 employ√©s).")
            self.ui.pause()
            return

        # Choix du poste
        positions = [pos.value for pos in EmployeePosition]
        position_choice = self.ui.show_menu("Quel poste recruter ?", positions)

        if position_choice == 0:
            return

        selected_position = list(EmployeePosition)[position_choice - 1]

        # Choix du contrat
        contracts = [cont.value for cont in EmployeeContract]
        contract_choice = self.ui.show_menu("Type de contrat ?", contracts)

        if contract_choice == 0:
            return

        selected_contract = list(EmployeeContract)[contract_choice - 1]

        # Salaire propos√©
        salary_ranges = {
            EmployeePosition.CUISINE: (1800, 3000),
            EmployeePosition.SALLE: (1700, 2500),
            EmployeePosition.MANAGER: (2500, 4000),
            EmployeePosition.PLONGE: (1650, 1900),
            EmployeePosition.CAISSE: (1650, 2200)
        }

        min_salary, max_salary = salary_ranges.get(selected_position, (1650, 3000))

        salary = self.ui.get_input(
            f"Salaire brut mensuel ({min_salary}-{max_salary}‚Ç¨)",
            Decimal,
            min_val=Decimal(str(min_salary)),
            max_val=Decimal(str(max_salary)),
            default=Decimal(str((min_salary + max_salary) // 2))
        )

        if salary:
            # Calcul du co√ªt total
            total_cost = salary * Decimal("1.42")  # Avec charges

            if restaurant.cash < total_cost * 3:  # V√©rification de solvabilit√©
                if not self.ui.confirm(
                    f"‚ö†Ô∏è Co√ªt: {total_cost:.0f}‚Ç¨/mois. "
                    f"Votre tr√©sorerie ne couvre que {restaurant.cash / total_cost:.1f} mois. "
                    f"Confirmer le recrutement ?"
                ):
                    return

            # Enregistrement de la d√©cision
            if 'recruitments' not in decisions:
                decisions['recruitments'] = []

            decisions['recruitments'].append({
                'position': selected_position,
                'contract': selected_contract,
                'salary': salary
            })

            self.ui.show_success(
                f"Recrutement programm√©: {selected_position.value} "
                f"en {selected_contract.value} √† {salary:.0f}‚Ç¨/mois"
            )
            self.ui.pause()

    def _purchasing_decisions(self, restaurant: Restaurant, decisions: Dict) -> None:
        """Gestion des achats et stocks avanc√©e."""
        while True:
            self.ui.clear_screen()

            submenu_options = [
                "üìã Pr√©vision & Besoins",
                "üõí Proposer une commande",
                "üì• R√©ception de commandes",
                "üì¶ √âtat des stocks & alertes",
                "üè™ Analyser les fournisseurs",
                "üìä Rapport qualit√©/prix",
                "üîô Retour"
            ]

            choice = self.ui.show_menu("ACHATS & STOCKS", submenu_options)

            if choice == 1:
                self._forecast_and_requirements(restaurant)
            elif choice == 2:
                self._propose_purchase_order(restaurant, decisions)
            elif choice == 3:
                self._receiving_interface(restaurant)
            elif choice == 4:
                self._stock_management_interface(restaurant)
            elif choice == 5:
                self._supplier_analysis_interface(restaurant)
            elif choice == 6:
                self._quality_price_report(restaurant)
            elif choice == 7:
                break

        # --- Achats & Stocks: Pr√©vision, besoins, PO, r√©ception ---
        # Pour simplifier, on stocke ces √©l√©ments sur l'objet restaurant s'ils n'existent pas

        # Structures d'√©tat minimales attendues sur restaurant
        if not hasattr(restaurant, "stock_manager"):
            restaurant.stock_manager = StockManager()
        if not hasattr(restaurant, "sales_forecast"):
            restaurant.sales_forecast = {}  # recipe_id -> qty next turn
        if not hasattr(restaurant, "pending_po_lines"):
            restaurant.pending_po_lines = []  # List[POLine]

    def _forecast_and_requirements(self, restaurant: Restaurant) -> None:
        """Saisie de pr√©vision par recette active et calcul des besoins net."""
        self.ui.clear_screen()
        active = restaurant.get_active_menu()
        if not active:
            self.ui.show_info("Aucune recette active pour √©tablir une pr√©vision.")
            self.ui.pause()
            return

        print("üìã PR√âVISION DES VENTES (prochain tour):")
        for rid in active.keys():
            cur = int(restaurant.sales_forecast.get(rid, 0))
            try:
                qty = self.ui.ask_int(f"  Portions pr√©vues pour {rid} (actuel {cur}): ", min_val=0, max_val=1000, default=cur)
                restaurant.sales_forecast[rid] = qty
            except Exception:
                continue

        # Calcul besoins avec ProcurementPlanner
        planner = ProcurementPlanner()
        # Il faut la d√©finition des recettes: dans ce contexte, on ne l'a pas directement ici.
        # On reconstruit une liste de Recipe depuis available_recipes si accessible via self.cost_calculator
        # Hypoth√®se: DecisionMenu est construit avec cost_calculator et l'appelant lui passera available_recipes ailleurs pour analyse.
        # Ici on fait un calcul simple bas√© sur les IDs seulement si les recettes ne sont pas accessibles (affichage d'une info).
        if not hasattr(self, "_available_recipes_cache"):
            self.ui.show_info("Note: pour le calcul pr√©cis des besoins, les recettes doivent √™tre connues. Cette version affichera le stock uniquement si non disponible.")
            self.ui.pause()
            return

    def cache_available_recipes(self, recipes: Dict[str, any]) -> None:
        """Optionnel: l'appelant peut fournir un cache des recettes pour achats."""
        self._available_recipes_cache = recipes

    def _propose_purchase_order(self, restaurant: Restaurant, decisions: Dict) -> None:
        """Propose un PO en fonction des besoins et permet √©dition simple."""
        self.ui.clear_screen()
        if not hasattr(self, "_available_recipes_cache"):
            self.ui.show_error("Recettes non disponibles pour proposer une commande. Activez des recettes et revenez.")
            self.ui.pause()
            return

        active_recipes = [self._available_recipes_cache[rid] for rid in restaurant.active_recipes if rid in self._available_recipes_cache]
        planner = ProcurementPlanner()
        requirements = planner.compute_requirements(active_recipes, restaurant.sales_forecast, restaurant.stock_manager)

        if not requirements:
            self.ui.show_info("Aucun besoin net d√©tect√© (stock suffisant ou pr√©vision nulle).")
            self.ui.pause()
            return

        # Construire un petit catalogue fournisseur factice bas√© sur l‚Äôingr√©dient (utilise cost catalog)
        suppliers_catalog = {}
        # On estime prix √† partir des ingr√©dients connus par le cost_calculator
        for ing_id, need in requirements.items():
            if ing_id in self.cost_calculator.ingredients:
                ing = self.cost_calculator.ingredients[ing_id]
                suppliers_catalog[ing_id] = {
                    "metro_pro": {"price_ht": ing.cost_ht, "vat": ing.vat_rate, "pack": Decimal("1"), "moq_value": Decimal("0")}
                }

        lines = planner.propose_purchase_orders(requirements, suppliers_catalog)
        if not lines:
            self.ui.show_info("Aucune proposition de commande possible (catalogue incomplet).")
            self.ui.pause()
            return

        # Affichage et √©dition simple
        view = ["üõí PROPOSITION DE COMMANDE:", ""]
        total_value = Decimal("0")
        for i, line in enumerate(lines, 1):
            line_value = line.quantity * line.unit_price_ht
            total_value += line_value
            view.append(f"{i}. {line.ingredient_id} ‚Äî {line.quantity} @ {line.unit_price_ht:.2f}‚Ç¨ (HT) = {line_value:.2f}‚Ç¨ ‚Äî {line.supplier_id}")

        view.append("")
        view.append(f"Total HT estim√©: {total_value:.2f}‚Ç¨")
        self.ui.print_box(view, "COMMANDE FOURNISSEURS", "info")

        if self.ui.confirm("Valider cette commande ?"):
            # Enregistrer comme en attente
            restaurant.pending_po_lines = lines
            decisions.setdefault("purchase_orders", []).append({
                "lines": [{
                    "ingredient_id": l.ingredient_id,
                    "qty": str(l.quantity),
                    "price_ht": str(l.unit_price_ht),
                    "supplier": l.supplier_id,
                } for l in lines],
                "total_ht": str(total_value)
            })
            self.ui.show_success("Commande enregistr√©e (√† r√©ceptionner)")
        else:
            self.ui.show_info("Commande annul√©e")
        self.ui.pause()

    def _receiving_interface(self, restaurant: Restaurant) -> None:
        """R√©ceptionne les lignes en attente et cr√©e des lots FEFO."""
        self.ui.clear_screen()
        lines: List[POLine] = getattr(restaurant, "pending_po_lines", [])
        if not lines:
            self.ui.show_info("Aucune commande en attente.")
            self.ui.pause()
            return

        print("üì• R√âCEPTION DE COMMANDE:")
        deliveries = []
        for i, l in enumerate(lines, 1):
            default_recv = l.quantity
            try:
                qty = self.ui.get_input(f"Quantit√© re√ßue pour {l.ingredient_id} (command√© {l.quantity}): ", Decimal, min_val=Decimal("0"), default=default_recv)
            except Exception:
                qty = default_recv
            deliveries.append({
                "ingredient_id": l.ingredient_id,
                "quantity_received": qty,
                "unit_price_ht": l.unit_price_ht,
                "vat_rate": l.vat_rate,
                "supplier_id": l.supplier_id,
                "pack_size": l.pack_size,
                "lot_number": None,
                "quality_level": 2,
            })

        # Conversion vers DeliveryLine dataclass
        from ..core.procurement import DeliveryLine, ReceivingService
        dl_lines = [DeliveryLine(**d) for d in deliveries]
        receiver = ReceivingService()
        lots = receiver.receive(dl_lines, date.today(), default_shelf_life_days=5)

        for lot in lots:
            restaurant.stock_manager.add_lot(lot)
        restaurant.pending_po_lines = []

        self.ui.show_success(f"{len(lots)} lots ajout√©s en stock (FEFO)")
        # Alertes DLC imm√©diates
        expiring = restaurant.stock_manager.get_expiring_lots(days=3)
        if expiring:
            msg = ["‚ö†Ô∏è LOTS PROCHE DLC:"] + [f"‚Ä¢ {lt.ingredient_id} ({lt.quantity}) ‚Äî DLC {lt.dlc}" for lt in expiring]
            self.ui.print_box(msg, "ALERTES DLC", "warning")
        self.ui.pause()

    def _place_order_interface(self, restaurant: Restaurant, decisions: Dict) -> None:
        """Interface de commande avec choix de qualit√©."""
        self.ui.clear_screen()
        self.ui.show_info("üõí CHOIX QUALIT√â DES INGR√âDIENTS")

        # Affichage de l'√©tat actuel
        current_quality = restaurant.get_overall_quality_score()
        print(f"\nüìä QUALIT√â ACTUELLE: {restaurant.get_quality_description()} ({current_quality:.1f}/5)")
        print(f"üí∞ Impact co√ªt: {restaurant.calculate_quality_cost_impact():.0%}")
        print(f"‚≠ê R√©putation: {restaurant.reputation:.1f}/10")

        # Choix des ingr√©dients principaux
        ingredients_to_configure = [
            ("beef_ground", "ü•© Viande (b≈ìuf hach√©)"),
            ("tomato", "üçÖ L√©gumes (tomates)"),
            ("cheese_mozzarella", "üßÄ Fromage (mozzarella)"),
            ("flour", "üåæ F√©culents (farine)")
        ]

        print(f"\nüéØ NIVEAUX DE QUALIT√â DISPONIBLES:")
        print(f"   1‚≠ê √âconomique (-30% co√ªt, -20% satisfaction)")
        print(f"   2‚≠ê Standard (prix de r√©f√©rence)")
        print(f"   3‚≠ê Sup√©rieur (+25% co√ªt, +15% satisfaction)")
        print(f"   4‚≠ê Premium (+50% co√ªt, +30% satisfaction)")
        print(f"   5‚≠ê Luxe (+100% co√ªt, +50% satisfaction)")

        changes_made = False

        for ingredient_id, ingredient_name in ingredients_to_configure:
            current_level = restaurant.ingredient_choices.get(ingredient_id, 2)
            print(f"\n{ingredient_name} (actuel: {current_level}‚≠ê)")

            try:
                new_level = self.ui.ask_int(
                    f"   Nouveau niveau (1-5) [actuel: {current_level}]: ",
                    min_val=1, max_val=5, default=current_level
                )

                if new_level != current_level:
                    restaurant.set_ingredient_quality(ingredient_id, new_level)
                    changes_made = True
                    print(f"   ‚úÖ {ingredient_name} mis √† jour: {current_level}‚≠ê ‚Üí {new_level}‚≠ê")

            except (ValueError, KeyboardInterrupt):
                print(f"   ‚è≠Ô∏è {ingredient_name} inchang√©")
                continue

        if changes_made:
            # Recalcul des m√©triques
            new_quality = restaurant.get_overall_quality_score()
            new_cost_impact = restaurant.calculate_quality_cost_impact()

            print(f"\nüìà IMPACT DES CHANGEMENTS:")
            print(f"   Qualit√©: {current_quality:.1f}/5 ‚Üí {new_quality:.1f}/5")
            print(f"   Co√ªt mati√®res: {restaurant.calculate_quality_cost_impact():.0%}")
            print(f"   Description: {restaurant.get_quality_description()}")

            # Sauvegarde dans les d√©cisions
            decisions['ingredient_quality_changes'] = {
                'previous_score': float(current_quality),
                'new_score': float(new_quality),
                'cost_impact': float(new_cost_impact),
                'ingredients': dict(restaurant.ingredient_choices)
            }

            self.ui.show_success("‚úÖ Choix de qualit√© enregistr√©s !")
        else:
            self.ui.show_info("‚ÑπÔ∏è Aucun changement effectu√©")

        self.ui.pause()

    def _stock_management_interface(self, restaurant: Restaurant) -> None:
        """Interface de gestion des stocks."""
        self.ui.show_info("üì¶ GESTION DES STOCKS")

        # Simuler l'affichage des stocks
        stock_info = [
            "üìä √âTAT DES STOCKS:",
            "",
            "ü•© Steak hach√©:",
            "   Lot A: 15kg (expire dans 2 jours) ‚ö†Ô∏è",
            "   Lot B: 8kg (expire dans 5 jours) ‚úÖ",
            "",
            "üçÖ Tomates:",
            "   Lot C: 5kg (expire demain) üö® PROMOTION -50%",
            "   Lot D: 12kg (expire dans 4 jours) ‚úÖ",
            "",
            "üí° Actions recommand√©es:",
            "‚Ä¢ Utiliser le Lot A en priorit√© (FEFO)",
            "‚Ä¢ Promouvoir les tomates du Lot C",
            "‚Ä¢ Commander du steak hach√© (stock bas)"
        ]

        self.ui.print_box(stock_info, "STOCKS ACTUELS")
        self.ui.pause()

    def _supplier_analysis_interface(self, restaurant: Restaurant) -> None:
        """Interface d'analyse des fournisseurs."""
        self.ui.show_info("üè™ ANALYSE DES FOURNISSEURS")

        suppliers_data = [
            "üìä COMPARATIF FOURNISSEURS:",
            "",
            "ü•© METRO PRO:",
            "   Fiabilit√©: 95% | D√©lai: 1j | Prix: Standard",
            "   Sp√©cialit√©: Gamme compl√®te 1‚òÖ-3‚òÖ",
            "",
            "üå± BIO FRANCE:",
            "   Fiabilit√©: 88% | D√©lai: 3j | Prix: +20%",
            "   Sp√©cialit√©: Bio et premium 3‚òÖ-5‚òÖ",
            "",
            "üöö RUNGIS DIRECT:",
            "   Fiabilit√©: 92% | D√©lai: 2j | Prix: Variable",
            "   Sp√©cialit√©: Frais quotidien 2‚òÖ-4‚òÖ",
            "",
            "üí° Recommandation: Diversifiez vos sources",
            "   selon votre positionnement qualit√©"
        ]

        self.ui.print_box(suppliers_data, "FOURNISSEURS")
        self.ui.pause()

    def _quality_price_report(self, restaurant: Restaurant) -> None:
        """Rapport qualit√©/prix d√©taill√©."""
        self.ui.clear_screen()
        self.ui.show_info("üìä RAPPORT QUALIT√â/PRIX D√âTAILL√â")

        # M√©triques actuelles
        quality_score = restaurant.get_overall_quality_score()
        cost_impact = restaurant.calculate_quality_cost_impact()
        avg_satisfaction = restaurant.get_average_satisfaction()
        avg_ticket = restaurant.get_average_ticket()

        # Facteurs d'attractivit√© par segment
        segments = ["students", "families", "foodies"]
        attractiveness_factors = {}
        for segment in segments:
            factor = restaurant.get_quality_attractiveness_factor(segment)
            attractiveness_factors[segment] = factor

        report_data = [
            "üìà M√âTRIQUES QUALIT√â ACTUELLES:",
            "",
            f"Score qualit√© global: {restaurant.get_quality_description()} ({quality_score:.1f}/5)",
            f"Impact sur co√ªts: {cost_impact:.0%}",
            f"Satisfaction client: {avg_satisfaction:.1f}/5",
            f"R√©putation: {restaurant.reputation:.1f}/10",
            f"Ticket moyen: {avg_ticket:.2f}‚Ç¨",
            "",
            "üéØ ATTRACTIVIT√â PAR SEGMENT:",
            "",
            f"‚Ä¢ √âtudiants: {attractiveness_factors['students']:.0%} (sensibilit√© faible)",
            f"‚Ä¢ Familles: {attractiveness_factors['families']:.0%} (sensibilit√© normale)",
            f"‚Ä¢ Foodies: {attractiveness_factors['foodies']:.0%} (sensibilit√© √©lev√©e)",
            "",
            "üí∞ ANALYSE CO√õT/B√âN√âFICE:",
            ""
        ]

        # Simulation d'am√©lioration qualit√©
        if quality_score < 4.0:
            target_quality = min(5.0, quality_score + 1.0)
            cost_increase = 25  # Estimation +25% pour +1 niveau
            satisfaction_increase = 15  # Estimation +15% satisfaction

            report_data.extend([
                f"üìà SIMULATION AM√âLIORATION (+1 niveau qualit√©):",
                f"‚Ä¢ Co√ªt suppl√©mentaire estim√©: +{cost_increase}%",
                f"‚Ä¢ Satisfaction suppl√©mentaire: +{satisfaction_increase}%",
                f"‚Ä¢ Nouvelle attractivit√© foodies: +{satisfaction_increase * 1.5:.0f}%",
                ""
            ])

        # Recommandations personnalis√©es
        recommendations = []

        if quality_score < 2.5:
            recommendations.append("üî¥ PRIORIT√â: Am√©liorer la qualit√© de base")
            recommendations.append("‚Ä¢ Passer au moins 2 ingr√©dients en niveau 3‚≠ê")
        elif quality_score < 3.5:
            recommendations.append("üü° OPPORTUNIT√â: Diff√©renciation qualit√©")
            recommendations.append("‚Ä¢ Cibler les foodies avec du premium (4‚≠ê)")
        else:
            recommendations.append("üü¢ EXCELLENCE: Maintenir la qualit√©")
            recommendations.append("‚Ä¢ Optimiser les co√ªts sans perdre en qualit√©")

        if restaurant.reputation < 6.0:
            recommendations.append("‚Ä¢ Am√©liorer la satisfaction pour la r√©putation")

        if avg_ticket > 0 and quality_score > 0:
            price_quality_ratio = float(avg_ticket / quality_score)
            if price_quality_ratio > 4.0:
                recommendations.append("‚Ä¢ Prix √©lev√© vs qualit√©: risque de perte clients")
            elif price_quality_ratio < 2.5:
                recommendations.append("‚Ä¢ Excellent rapport qualit√©/prix: potentiel hausse prix")

        report_data.extend(["üéØ RECOMMANDATIONS PERSONNALIS√âES:", ""])
        report_data.extend(recommendations)

        # D√©tail des ingr√©dients
        if restaurant.ingredient_choices:
            report_data.extend(["", "ü•ò D√âTAIL INGR√âDIENTS:", ""])
            for ingredient_id, level in restaurant.ingredient_choices.items():
                ingredient_name = {
                    "beef_ground": "Viande",
                    "tomato": "L√©gumes",
                    "cheese_mozzarella": "Fromage",
                    "flour": "F√©culents"
                }.get(ingredient_id, ingredient_id)

                stars = "‚≠ê" * level
                report_data.append(f"‚Ä¢ {ingredient_name}: {stars} (niveau {level})")

        self.ui.print_box(report_data, "RAPPORT QUALIT√â/PRIX")
        self.ui.pause()

    def _alerts_promotions_interface(self, restaurant: Restaurant) -> None:
        """Interface des alertes et promotions."""
        self.ui.show_info("‚ö†Ô∏è ALERTES ET PROMOTIONS")

        alerts_data = [
            "üö® ALERTES URGENTES:",
            "",
            "‚Ä¢ 5kg de tomates expirent demain",
            "  ‚Üí Promotion -50% recommand√©e",
            "",
            "‚Ä¢ Stock de steak hach√© bas (8kg restants)",
            "  ‚Üí Commande urgente sugg√©r√©e",
            "",
            "üéØ OPPORTUNIT√âS SAISONNI√àRES:",
            "",
            "‚Ä¢ Tomates d'√©t√©: -30% ce mois",
            "  ‚Üí Qualit√© +1‚òÖ pour m√™me prix",
            "",
            "‚Ä¢ Champignons d'automne disponibles",
            "  ‚Üí Nouveau plat saisonnier possible"
        ]

        self.ui.print_box(alerts_data, "ALERTES")
        self.ui.pause()

    def _marketing_interface(self, restaurant: Restaurant, decisions: Dict) -> None:
        """Interface marketing et communication."""
        self.ui.clear_screen()
        self.ui.show_info("üìà MARKETING & COMMUNICATION")

        # Simuler l'√©tat marketing actuel
        print(f"\nüìä √âTAT MARKETING ACTUEL:")
        print(f"   R√©putation en ligne: 4.2/5 ‚≠ê (127 avis)")
        print(f"   Budget marketing mensuel: 850‚Ç¨")
        print(f"   Campagnes actives: 2")
        print(f"   ROI marketing: 3.2x")

        # Options de campagnes
        print(f"\nüéØ CAMPAGNES DISPONIBLES:")
        campaigns = [
            {"name": "R√©seaux sociaux", "cost": "50‚Ç¨/jour", "reach": "1000 personnes", "conversion": "2.5%"},
            {"name": "Publicit√© locale", "cost": "80‚Ç¨/jour", "reach": "750 personnes", "conversion": "3.5%"},
            {"name": "Programme fid√©lit√©", "cost": "30‚Ç¨/jour", "reach": "150 clients", "conversion": "15%"},
            {"name": "√âv√©nement sp√©cial", "cost": "200‚Ç¨/jour", "reach": "400 personnes", "conversion": "8%"},
        ]

        for i, campaign in enumerate(campaigns, 1):
            print(f"   {i}. {campaign['name']}: {campaign['cost']} - {campaign['reach']} - {campaign['conversion']}")

        print(f"\nüí° RECOMMANDATIONS:")
        print(f"   ‚Ä¢ Augmenter pr√©sence r√©seaux sociaux (+20% clients jeunes)")
        print(f"   ‚Ä¢ Lancer programme fid√©lit√© (r√©tention +30%)")
        print(f"   ‚Ä¢ R√©pondre aux avis n√©gatifs (r√©putation +0.3)")

        # Choix de campagne
        try:
            choice = self.ui.ask_int("Lancer une campagne (1-4) ou 0 pour passer: ", min_val=0, max_val=4, default=0)
            if choice > 0:
                campaign = campaigns[choice - 1]
                duration = self.ui.ask_int(f"Dur√©e en jours pour '{campaign['name']}': ", min_val=1, max_val=30, default=7)

                decisions['marketing_campaign'] = {
                    'type': campaign['name'],
                    'cost_per_day': campaign['cost'],
                    'duration': duration,
                    'expected_reach': campaign['reach'],
                    'expected_conversion': campaign['conversion']
                }

                self.ui.show_success(f"‚úÖ Campagne '{campaign['name']}' programm√©e pour {duration} jours")
            else:
                self.ui.show_info("‚ÑπÔ∏è Aucune campagne lanc√©e")

        except (ValueError, KeyboardInterrupt):
            self.ui.show_info("‚ÑπÔ∏è Aucune campagne lanc√©e")

        self.ui.pause()

    def _finance_interface(self, restaurant: Restaurant, decisions: Dict) -> None:
        """Interface finance avanc√©e."""
        self.ui.clear_screen()
        self.ui.show_info("üí∞ FINANCE AVANC√âE")

        # Simuler les donn√©es financi√®res
        print(f"\nüìä TABLEAU DE BORD FINANCIER:")
        print(f"   Tr√©sorerie: 12,450‚Ç¨")
        print(f"   CA mensuel: 28,750‚Ç¨")
        print(f"   Marge brute: 65.2%")
        print(f"   R√©sultat net: 4,320‚Ç¨ (15.0%)")

        print(f"\nüìà RATIOS FINANCIERS:")
        print(f"   Liquidit√©: 2.1 (Bon)")
        print(f"   Endettement: 35% (Acceptable)")
        print(f"   ROE: 18.5% (Excellent)")
        print(f"   Rotation stocks: 12x/an (Optimal)")

        print(f"\nüçΩÔ∏è RENTABILIT√â PAR PLAT:")
        dishes = [
            {"name": "Burger Classic", "price": "12.50‚Ç¨", "cost": "4.20‚Ç¨", "margin": "66.4%", "volume": 145},
            {"name": "Salade C√©sar", "price": "9.80‚Ç¨", "cost": "3.10‚Ç¨", "margin": "68.4%", "volume": 89},
            {"name": "Pizza Margherita", "price": "11.00‚Ç¨", "cost": "3.80‚Ç¨", "margin": "65.5%", "volume": 112},
            {"name": "P√¢tes Carbonara", "price": "10.50‚Ç¨", "cost": "2.90‚Ç¨", "margin": "72.4%", "volume": 78}
        ]

        for dish in dishes:
            print(f"   ‚Ä¢ {dish['name']}: {dish['price']} (co√ªt: {dish['cost']}, marge: {dish['margin']}, vol: {dish['volume']})")

        print(f"\nüí° RECOMMANDATIONS FINANCI√àRES:")
        print(f"   ‚Ä¢ Augmenter prix Burger Classic (+0.50‚Ç¨ = +290‚Ç¨/mois)")
        print(f"   ‚Ä¢ Promouvoir P√¢tes Carbonara (marge la plus √©lev√©e)")
        print(f"   ‚Ä¢ Optimiser co√ªts Pizza Margherita (-0.20‚Ç¨ co√ªt)")
        print(f"   ‚Ä¢ N√©gocier d√©lais fournisseurs (tr√©sorerie +15%)")

        # Options financi√®res
        print(f"\nüéØ ACTIONS DISPONIBLES:")
        print(f"   1. Demander un pr√™t bancaire")
        print(f"   2. Investir dans du mat√©riel")
        print(f"   3. Optimiser la tr√©sorerie")
        print(f"   4. Analyser un investissement")

        try:
            choice = self.ui.ask_int("Choisir une action (1-4) ou 0 pour passer: ", min_val=0, max_val=4, default=0)

            if choice == 1:
                amount = self.ui.ask_float("Montant du pr√™t souhait√© (‚Ç¨): ", min_val=1000, max_val=50000, default=10000)
                decisions['loan_request'] = {
                    'amount': amount,
                    'purpose': 'expansion',
                    'estimated_rate': '4.5%'
                }
                self.ui.show_success(f"‚úÖ Demande de pr√™t de {amount:,.0f}‚Ç¨ enregistr√©e")

            elif choice == 2:
                equipment_options = [
                    {"name": "Four professionnel", "cost": 8500, "benefit": "+20% capacit√©"},
                    {"name": "Syst√®me de caisse", "cost": 2200, "benefit": "+15% efficacit√©"},
                    {"name": "Frigo suppl√©mentaire", "cost": 3800, "benefit": "+30% stocks"}
                ]

                print(f"\nüîß √âQUIPEMENTS DISPONIBLES:")
                for i, eq in enumerate(equipment_options, 1):
                    print(f"   {i}. {eq['name']}: {eq['cost']}‚Ç¨ ({eq['benefit']})")

                eq_choice = self.ui.ask_int("Choisir √©quipement (1-3): ", min_val=1, max_val=3, default=1)
                equipment = equipment_options[eq_choice - 1]

                decisions['equipment_purchase'] = {
                    'name': equipment['name'],
                    'cost': equipment['cost'],
                    'benefit': equipment['benefit']
                }
                self.ui.show_success(f"‚úÖ Achat {equipment['name']} programm√©")

            elif choice == 3:
                print(f"\nüí∞ OPTIMISATION TR√âSORERIE:")
                print(f"   ‚Ä¢ N√©gocier d√©lais paiement fournisseurs: +2,100‚Ç¨")
                print(f"   ‚Ä¢ Acc√©l√©rer encaissements clients: +850‚Ç¨")
                print(f"   ‚Ä¢ Optimiser niveau stocks: +1,200‚Ç¨")

                decisions['cash_optimization'] = True
                self.ui.show_success("‚úÖ Plan d'optimisation tr√©sorerie activ√©")

            elif choice == 4:
                investment_amount = self.ui.ask_float("Montant investissement (‚Ç¨): ", min_val=1000, max_val=30000, default=5000)
                expected_return = investment_amount * 0.15  # 15% de retour estim√©
                payback_months = investment_amount / (expected_return / 12)

                print(f"\nüìä ANALYSE INVESTISSEMENT:")
                print(f"   Investissement: {investment_amount:,.0f}‚Ç¨")
                print(f"   Retour annuel estim√©: {expected_return:,.0f}‚Ç¨")
                print(f"   Retour sur investissement: 15%")
                print(f"   P√©riode de retour: {payback_months:.1f} mois")

                decisions['investment_analysis'] = {
                    'amount': investment_amount,
                    'expected_return': expected_return,
                    'roi': 0.15,
                    'payback_months': payback_months
                }

            else:
                self.ui.show_info("‚ÑπÔ∏è Aucune action financi√®re")

        except (ValueError, KeyboardInterrupt):
            self.ui.show_info("‚ÑπÔ∏è Aucune action financi√®re")

        self.ui.pause()

    def _marketing_decisions(self, restaurant: Restaurant, decisions: Dict) -> None:
        """D√©cisions marketing et commerciales."""
        while True:
            self.ui.clear_screen()

            submenu_options = [
                "üì¢ Lancer une campagne publicitaire",
                "üéÅ Programme de fid√©lit√©",
                "üéâ Organiser un √©v√©nement sp√©cial",
                "ü§ù Partenariats locaux",
                "üì± Pr√©sence digitale",
                "üí≥ Moyens de paiement"
            ]

            choice = self.ui.show_menu("MARKETING & COMMERCIAL", submenu_options)

            if choice == 0:
                break
            elif choice == 1:
                self._advertising_campaign(restaurant, decisions)
            elif choice == 2:
                self._loyalty_program(restaurant, decisions)
            elif choice == 3:
                self._special_event(restaurant, decisions)
            else:
                self.ui.show_info(f"Option {choice} - En d√©veloppement")
                self.ui.pause()

    def _advertising_campaign(self, restaurant: Restaurant, decisions: Dict) -> None:
        """Campagne publicitaire."""
        campaign_types = [
            ("Flyers quartier", 200, "Faible", "Distribution de flyers dans le quartier"),
            ("Radio locale", 800, "Moyen", "Spot radio aux heures de pointe"),
            ("R√©seaux sociaux", 300, "Moyen", "Campagne Facebook/Instagram cibl√©e"),
            ("Journal local", 500, "Faible", "Encart publicitaire dans la presse locale"),
            ("Influenceurs", 1200, "Fort", "Collaboration avec des influenceurs food")
        ]

        self.ui.clear_screen()

        campaign_options = [
            f"{name} - {cost}‚Ç¨ (Impact: {impact})"
            for name, cost, impact, desc in campaign_types
        ]

        choice = self.ui.show_menu("CAMPAGNES PUBLICITAIRES", campaign_options)

        if choice == 0:
            return

        selected_campaign = campaign_types[choice - 1]
        name, cost, impact, description = selected_campaign

        # Affichage des d√©tails
        details = [
            f"CAMPAGNE: {name}",
            f"Co√ªt: {cost}‚Ç¨",
            f"Impact attendu: {impact}",
            f"Description: {description}",
            "",
            f"Tr√©sorerie actuelle: {restaurant.cash:.0f}‚Ç¨",
            f"Tr√©sorerie apr√®s campagne: {restaurant.cash - cost:.0f}‚Ç¨"
        ]

        self.ui.print_box(details, style="info")

        if restaurant.cash < cost:
            self.ui.show_error("Tr√©sorerie insuffisante pour cette campagne.")
            self.ui.pause()
            return

        if self.ui.confirm(f"Lancer la campagne {name} pour {cost}‚Ç¨ ?"):
            if 'marketing_campaigns' not in decisions:
                decisions['marketing_campaigns'] = []

            decisions['marketing_campaigns'].append({
                'type': name,
                'cost': cost,
                'impact': impact
            })

            self.ui.show_success(f"Campagne {name} programm√©e !")
            self.ui.pause()

    def _financial_decisions(self, restaurant: Restaurant, decisions: Dict) -> None:
        """D√©cisions financi√®res."""
        while True:
            self.ui.clear_screen()

            submenu_options = [
                "üí≥ Demander un pr√™t bancaire",
                "üí∞ Rembourser un emprunt",
                "üìà Placer des exc√©dents",
                "üìä Analyser la rentabilit√©",
                "üí∏ G√©rer la tr√©sorerie"
            ]

            choice = self.ui.show_menu("FINANCE", submenu_options)

            if choice == 0:
                break
            else:
                self.ui.show_info(f"Option financi√®re {choice} - En d√©veloppement")
                self.ui.pause()

    def _show_reports(self, restaurant: Restaurant) -> None:
        """Affichage des rapports financiers."""
        while True:
            self.ui.clear_screen()

            report_options = [
                "üìä Compte de r√©sultat",
                "üí∞ Tableau de flux de tr√©sorerie",
                "üìã Bilan comptable",
                "üìà Analyse des KPIs",
                "üìâ √âvolution des performances"
            ]

            choice = self.ui.show_menu("RAPPORTS & ANALYSES", report_options)

            if choice == 0:
                break
            elif choice == 1:
                # Pour la d√©mo, on cr√©e un ledger vide
                from ..core.ledger import Ledger
                ledger = Ledger()
                self.financial_reports.show_profit_loss_statement(restaurant, ledger)
                self.ui.pause()
            elif choice == 2:
                from ..core.ledger import Ledger
                ledger = Ledger()
                self.financial_reports.show_cash_flow_statement(restaurant, ledger)
                self.ui.pause()
            elif choice == 3:
                from ..core.ledger import Ledger
                ledger = Ledger()
                self.financial_reports.show_balance_sheet(restaurant, ledger)
                self.ui.pause()
            else:
                self.ui.show_info(f"Rapport {choice} - En d√©veloppement")
                self.ui.pause()

    def _validate_decisions(self, restaurant: Restaurant, decisions: Dict) -> bool:
        """Validation finale des d√©cisions."""
        if not decisions:
            return self.ui.confirm("Aucune d√©cision prise. Passer au tour suivant ?")

        # R√©sum√© des d√©cisions
        summary = ["R√âSUM√â DES D√âCISIONS:"]

        if 'price_changes' in decisions:
            summary.append("üí∞ Modifications de prix:")
            for recipe, price in decisions['price_changes'].items():
                summary.append(f"  ‚Ä¢ {recipe}: {price:.2f}‚Ç¨")

        if 'recruitments' in decisions:
            summary.append("üë§ Recrutements:")
            for recruit in decisions['recruitments']:
                summary.append(f"  ‚Ä¢ {recruit['position'].value} - {recruit['salary']:.0f}‚Ç¨/mois")

        if 'marketing_campaigns' in decisions:
            summary.append("üì¢ Campagnes marketing:")
            for campaign in decisions['marketing_campaigns']:
                summary.append(f"  ‚Ä¢ {campaign['type']} - {campaign['cost']}‚Ç¨")

        self.ui.print_box(summary, "VALIDATION", "warning")

        return self.ui.confirm("Valider ces d√©cisions et passer au tour suivant ?")

    # M√©thodes utilitaires (impl√©mentation compl√®te)
    def _add_recipes(self, restaurant: Restaurant, available_recipes: Dict, decisions: Dict) -> None:
        """Ajoute des recettes disponibles au menu actif avec prix TTC."""
        self.ui.clear_screen()

        # Recettes non actives
        inactive = [r for r in available_recipes.values() if r.id not in restaurant.active_recipes]
        if not inactive:
            self.ui.show_info("Toutes les recettes sont d√©j√† actives.")
            self.ui.pause()
            return

        # Choix multiple simple (it√©ratif)
        while True:
            options = [f"{r.name} ({r.id})" for r in inactive]
            choice = self.ui.show_menu("Ajouter un plat", options)
            if choice == 0:
                break

            recipe = inactive[choice - 1]

            # Proposer prix par d√©faut selon co√ªt + cible marge
            breakdown = self.cost_calculator.calculate_recipe_cost(recipe)
            cost_per_portion = breakdown.total_cost_with_labor / recipe.portions

            target_margin_pct = {
                "fast": Decimal("0.70"),
                "classic": Decimal("0.75"),
                "brasserie": Decimal("0.72"),
                "gastronomique": Decimal("0.80"),
            }.get(restaurant.type.value, Decimal("0.70"))

            # TVA simplifi√©e 10%
            vat = Decimal("0.10")
            default_price_ht = cost_per_portion / (Decimal("1.0") - target_margin_pct)
            default_price_ttc = (default_price_ht * (Decimal("1.0") + vat)).quantize(Decimal("0.10"))

            price_ttc = self.ui.get_input(
                f"Prix TTC pour {recipe.name} (co√ªt/portion ~{cost_per_portion:.2f}‚Ç¨)",
                Decimal,
                min_val=Decimal("1.0"),
                max_val=Decimal("100.0"),
                default=default_price_ttc,
            )
            if not price_ttc:
                continue

            restaurant.set_recipe_price(recipe.id, price_ttc)
            restaurant.activate_recipe(recipe.id)

            # Enregistrer d√©cision
            decisions.setdefault("added_recipes", []).append({
                "recipe_id": recipe.id,
                "price_ttc": price_ttc,
            })

            # Retirer de la liste inactive
            inactive = [r for r in inactive if r.id != recipe.id]
            if not inactive or not self.ui.confirm("Ajouter un autre plat ?"):
                break

    def _remove_recipes(self, restaurant: Restaurant, decisions: Dict) -> None:
        """Retire des recettes du menu actif."""
        active = restaurant.get_active_menu()
        if not active:
            self.ui.show_info("Aucune recette active.")
            self.ui.pause()
            return

        options = [f"{rid} - {price:.2f}‚Ç¨" for rid, price in active.items()]
        choice = self.ui.show_menu("Retirer un plat", options)
        if choice == 0:
            return

        selected_id = list(active.keys())[choice - 1]
        restaurant.deactivate_recipe(selected_id)
        decisions.setdefault("removed_recipes", []).append(selected_id)
        self.ui.show_success(f"Recette {selected_id} d√©sactiv√©e")
        self.ui.pause()

    def _analyze_recipe_profitability(self, restaurant: Restaurant, available_recipes: Dict) -> None:
        """Analyse marge et recommandations par recette active."""
        active = restaurant.get_active_menu()
        if not active:
            self.ui.show_info("Aucune recette active.")
            self.ui.pause()
            return

        lines = ["üìä RENTABILIT√â PAR PLAT:", ""]
        for rid, price_ttc in active.items():
            if rid not in available_recipes:
                continue
            recipe = available_recipes[rid]
            # TODO: passer les lots de stock r√©els si disponibles
            analysis = self.cost_calculator.calculate_margin_analysis(recipe, price_ttc, vat_rate=Decimal("0.10"))
            margin_pct = analysis["margin_percentage"] * 100
            lines.append(f"‚Ä¢ {recipe.name}: prix {price_ttc:.2f}‚Ç¨, marge {margin_pct:.1f}% (co√ªt/portion {analysis['cost_per_portion']:.2f}‚Ç¨)")

            # Cibles par type
            targets = {"fast": 70, "classic": 75, "brasserie": 72, "gastronomique": 80}
            target = targets.get(restaurant.type.value, 70)
            if margin_pct < target:
                # Proposer nouvelle tarification HT -> TTC
                new_price_ht = analysis["cost_per_portion"] / (Decimal("1.0") - Decimal(str(target/100)))
                new_price_ttc = new_price_ht * Decimal("1.10")
                lines.append(f"   ‚Ü≥ Suggestion: augmenter √† ~{new_price_ttc:.2f}‚Ç¨ pour atteindre {target}%")

        self.ui.print_box(lines, "ANALYSE RENTABILIT√â", "info")
        self.ui.pause()

    def _create_daily_menu(self, restaurant: Restaurant, decisions: Dict) -> None:
        """Cr√©e un menu du jour (sous-ensemble des recettes actives) avec prix sp√©ciaux."""
        active = restaurant.get_active_menu()
        if not active:
            self.ui.show_info("Aucune recette active.")
            self.ui.pause()
            return

        options = [f"{rid} - {price:.2f}‚Ç¨" for rid, price in active.items()]
        selection: List[str] = []

        while True:
            choice = self.ui.show_menu("Ajouter au menu du jour", options)
            if choice == 0:
                break
            rid = list(active.keys())[choice - 1]
            if rid not in selection:
                selection.append(rid)
            if not self.ui.confirm("Ajouter un autre plat au menu du jour ?"):
                break

        if not selection:
            self.ui.show_info("Aucune s√©lection pour le menu du jour.")
            self.ui.pause()
            return

        # Prix sp√©ciaux (remise % simple)
        discount = self.ui.get_input("Remise % (ex: 20 pour -20%)", Decimal, min_val=Decimal("0"), max_val=Decimal("90"), default=Decimal("20"))
        specials = {}
        for rid in selection:
            base = active[rid]
            specials[rid] = (base * (Decimal("1.0") - discount/Decimal("100"))).quantize(Decimal("0.10"))

        decisions["daily_menu"] = specials
        self.ui.show_success("Menu du jour cr√©√© pour 1 tour")
        self.ui.pause()

    def _show_sales_history(self, restaurant: Restaurant) -> None:
        """Affiche l'historique des ventes par recette (si disponible)."""
        history = getattr(restaurant, "sales_history", None)
        if not history:
            self.ui.show_info("Aucun historique de ventes disponible.")
            self.ui.pause()
            return

        lines = ["üìà HISTORIQUE DES VENTES:", ""]
        for rid, records in history.items():  # records: List[Tuple[turn, qty]]
            total = sum(q for _, q in records)
            lines.append(f"‚Ä¢ {rid}: total {total} portions")
        self.ui.print_box(lines, "VENTES", "info")
        self.ui.pause()

    def _fire_employee(self, restaurant: Restaurant, decisions: Dict) -> None:
        self.ui.show_info("Licenciement - En d√©veloppement")
        self.ui.pause()

    def _train_employees(self, restaurant: Restaurant, decisions: Dict) -> None:
        self.ui.show_info("Formation - En d√©veloppement")
        self.ui.pause()

    def _adjust_schedules(self, restaurant: Restaurant, decisions: Dict) -> None:
        self.ui.show_info("Horaires - En d√©veloppement")
        self.ui.pause()

    def _negotiate_salaries(self, restaurant: Restaurant, decisions: Dict) -> None:
        self.ui.show_info("N√©gociation salaires - En d√©veloppement")
        self.ui.pause()

    def _analyze_productivity(self, restaurant: Restaurant) -> None:
        self.ui.show_info("Analyse productivit√© - En d√©veloppement")
        self.ui.pause()

    def _loyalty_program(self, restaurant: Restaurant, decisions: Dict) -> None:
        self.ui.show_info("Programme fid√©lit√© - En d√©veloppement")
        self.ui.pause()

    def _special_event(self, restaurant: Restaurant, decisions: Dict) -> None:
        self.ui.show_info("√âv√©nement sp√©cial - En d√©veloppement")
        self.ui.pause()

    def _investment_decisions(self, restaurant: Restaurant, decisions: Dict) -> None:
        self.ui.show_info("Investissements - En d√©veloppement")
        self.ui.pause()

    def show_random_events(self, event_manager: RandomEventManager) -> None:
        """Affiche les √©v√©nements al√©atoires actifs."""
        events_summary = event_manager.get_events_summary()

        if not events_summary["active_events"]:
            self.ui.show_info("üìÖ Aucun √©v√©nement sp√©cial en cours")
            return

        self.ui.clear_screen()
        self.ui.show_info("üé≤ √âV√âNEMENTS EN COURS")

        for event in events_summary["active_events"]:
            print(f"\n{event['title']}")
            print(f"   üìù {event['description']}")
            print(f"   üìä Cat√©gorie: {event['category']}")
            print(f"   ‚è±Ô∏è Reste: {event['remaining_turns']} tour(s)")

        # Afficher les effets cumul√©s
        effects = event_manager.get_current_effects()

        print(f"\nüìà EFFETS CUMUL√âS:")
        if effects["demand_multiplier"] != 1.0:
            change = (effects["demand_multiplier"] - 1) * 100
            print(f"   Demande globale: {change:+.0f}%")

        if effects["price_sensitivity"] != 1.0:
            change = (effects["price_sensitivity"] - 1) * 100
            print(f"   Sensibilit√© aux prix: {change:+.0f}%")

        if effects["quality_importance"] != 1.0:
            change = (effects["quality_importance"] - 1) * 100
            print(f"   Importance de la qualit√©: {change:+.0f}%")

        if effects["segment_effects"]:
            print(f"   Effets par segment:")
            for segment, multiplier in effects["segment_effects"].items():
                change = (multiplier - 1) * 100
                print(f"     ‚Ä¢ {segment}: {change:+.0f}%")

        self.ui.pause()
