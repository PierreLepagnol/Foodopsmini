"""
Configuration administrateur pour FoodOps Pro.
"""

from dataclasses import dataclass, field
from typing import Dict, List, Optional, Any
from decimal import Decimal
from pathlib import Path
import yaml

from ..domain.scenario import Scenario, MarketSegment
from ..domain.restaurant import RestaurantType


@dataclass
class AdminSettings:
    """Configuration administrateur pour une partie."""
    
    # Informations g√©n√©rales
    session_name: str = "Session FoodOps Pro 2025"
    instructor_name: str = ""
    course_code: str = ""
    academic_year: str = "2025-2026"
    
    # Param√®tres de jeu
    max_players: int = 4
    starting_budget_min: Decimal = Decimal("20000")
    starting_budget_max: Decimal = Decimal("1000000")
    allow_loans: bool = True
    max_loan_amount: Decimal = Decimal("50000")
    loan_interest_rate: Decimal = Decimal("0.045")
    
    # Dur√©e et difficult√©
    total_turns: int = 12
    turn_duration_description: str = "1 mois"
    ai_difficulty: str = "medium"  # easy, medium, hard
    ai_count: int = 2
    
    # √âv√©nements et r√©alisme
    enable_random_events: bool = True
    enable_seasonal_effects: bool = True
    enable_economic_cycles: bool = False
    event_frequency: Decimal = Decimal("0.15")  # 15% de chance par tour
    
    # March√©
    total_market_size: int = 500
    market_growth_rate: Decimal = Decimal("0.02")  # 2% par an
    competition_intensity: str = "normal"  # low, normal, high
    
    # P√©dagogie
    show_competitor_details: bool = False
    enable_hints: bool = True
    auto_save: bool = True
    detailed_feedback: bool = True
    
    # √âvaluation
    enable_scoring: bool = True
    scoring_criteria: Dict[str, Decimal] = field(default_factory=lambda: {
        "survival": Decimal("0.3"),      # 30% - Survie
        "profitability": Decimal("0.25"), # 25% - Rentabilit√©
        "growth": Decimal("0.20"),       # 20% - Croissance
        "efficiency": Decimal("0.15"),   # 15% - Efficacit√©
        "strategy": Decimal("0.10")      # 10% - Strat√©gie
    })
    
    # Restrictions
    restrict_restaurant_types: List[str] = field(default_factory=list)
    min_employees: int = 1
    max_employees: int = 10
    allow_price_changes: bool = True
    price_change_limit: Decimal = Decimal("0.20")  # ¬±20%
    
    # Commerce disponibles
    available_locations: List[str] = field(default_factory=lambda: [
        "centre_ville", "banlieue", "zone_commerciale", "quartier_etudiant"
    ])


class AdminConfigManager:
    """Gestionnaire de configuration administrateur."""
    
    def __init__(self, ui):
        self.ui = ui
        self.settings = AdminSettings()
    
    def configure_session(self) -> AdminSettings:
        """Interface de configuration compl√®te pour l'administrateur."""
        self.ui.clear_screen()
        
        welcome = [
            "üë®‚Äçüè´ CONFIGURATION ADMINISTRATEUR",
            "",
            "Bienvenue dans l'interface de configuration FoodOps Pro.",
            "Vous pouvez personnaliser tous les aspects de la partie",
            "pour vos √©tudiants."
        ]
        self.ui.print_box(welcome, "MODE PROFESSEUR", "header")
        
        # Menu principal de configuration
        while True:
            self.ui.clear_screen()
            self._show_current_config()
            
            menu_options = [
                "üìã Informations de session",
                "üéÆ Param√®tres de jeu",
                "üè™ Fonds de commerce disponibles",
                "üìä March√© et concurrence",
                "üéØ √âv√©nements et r√©alisme",
                "üìù √âvaluation et notation",
                "üîí Restrictions et limites",
                "üíæ Sauvegarder configuration",
                "‚ñ∂Ô∏è Lancer la partie"
            ]
            
            choice = self.ui.show_menu("CONFIGURATION ADMINISTRATEUR", menu_options, allow_back=False)
            
            if choice == 1:
                self._configure_session_info()
            elif choice == 2:
                self._configure_game_params()
            elif choice == 3:
                self._configure_commerce_locations()
            elif choice == 4:
                self._configure_market()
            elif choice == 5:
                self._configure_events()
            elif choice == 6:
                self._configure_evaluation()
            elif choice == 7:
                self._configure_restrictions()
            elif choice == 8:
                self._save_configuration()
            elif choice == 9:
                if self._validate_configuration():
                    break
        
        return self.settings
    
    def _show_current_config(self):
        """Affiche la configuration actuelle."""
        config_summary = [
            f"üìã Session: {self.settings.session_name}",
            f"üë®‚Äçüè´ Professeur: {self.settings.instructor_name or 'Non d√©fini'}",
            f"üéì Cours: {self.settings.course_code or 'Non d√©fini'}",
            "",
            f"üë• Joueurs max: {self.settings.max_players}",
            f"üí∞ Budget initial: {self.settings.starting_budget_min}‚Ç¨ - {self.settings.starting_budget_max}‚Ç¨",
            f"‚è±Ô∏è Dur√©e: {self.settings.total_turns} tours ({self.settings.turn_duration_description} chacun)",
            f"ü§ñ IA: {self.settings.ai_count} concurrent(s) - Difficult√© {self.settings.ai_difficulty}",
            "",
            f"üé≤ √âv√©nements al√©atoires: {'‚úÖ' if self.settings.enable_random_events else '‚ùå'}",
            f"üìà Effets saisonniers: {'‚úÖ' if self.settings.enable_seasonal_effects else '‚ùå'}",
            f"üìä Notation automatique: {'‚úÖ' if self.settings.enable_scoring else '‚ùå'}"
        ]
        
        self.ui.print_box(config_summary, "CONFIGURATION ACTUELLE", "info")
    
    def _configure_session_info(self):
        """Configure les informations de session."""
        self.ui.clear_screen()
        
        info = [
            "üìã INFORMATIONS DE SESSION",
            "",
            "D√©finissez les informations g√©n√©rales de votre cours."
        ]
        self.ui.print_box(info, style="header")
        
        self.settings.session_name = self.ui.get_input(
            "Nom de la session",
            default=self.settings.session_name
        )
        
        self.settings.instructor_name = self.ui.get_input(
            "Nom du professeur",
            default=self.settings.instructor_name
        )
        
        self.settings.course_code = self.ui.get_input(
            "Code du cours (ex: GEST301)",
            default=self.settings.course_code
        )
        
        self.settings.academic_year = self.ui.get_input(
            "Ann√©e acad√©mique",
            default=self.settings.academic_year
        )
        
        self.ui.show_success("Informations de session mises √† jour.")
        self.ui.pause()
    
    def _configure_game_params(self):
        """Configure les param√®tres de jeu."""
        self.ui.clear_screen()
        
        info = [
            "üéÆ PARAM√àTRES DE JEU",
            "",
            "D√©finissez la dur√©e, la difficult√© et les r√®gles de base."
        ]
        self.ui.print_box(info, style="header")
        
        self.settings.max_players = self.ui.get_input(
            "Nombre maximum de joueurs",
            int, min_val=1, max_val=8,
            default=self.settings.max_players
        )
        
        self.settings.total_turns = self.ui.get_input(
            "Nombre de tours",
            int, min_val=6, max_val=48,
            default=self.settings.total_turns
        )
        
        duration_options = ["1 semaine", "2 semaines", "1 mois", "1 trimestre", "6 mois"]
        duration_choice = self.ui.show_menu(
            "Dur√©e repr√©sent√©e par chaque tour",
            duration_options
        )
        if duration_choice > 0:
            self.settings.turn_duration_description = duration_options[duration_choice - 1]
        
        self.settings.starting_budget_min = self.ui.get_input(
            "Budget initial minimum (‚Ç¨)",
            Decimal, min_val=Decimal("5000"),
            default=self.settings.starting_budget_min
        )
        
        self.settings.starting_budget_max = self.ui.get_input(
            "Budget initial maximum (‚Ç¨)",
            Decimal, min_val=self.settings.starting_budget_min,
            default=self.settings.starting_budget_max
        )
        
        self.settings.allow_loans = self.ui.confirm(
            "Autoriser les emprunts",
            default=self.settings.allow_loans
        )
        
        if self.settings.allow_loans:
            self.settings.max_loan_amount = self.ui.get_input(
                "Montant maximum d'emprunt (‚Ç¨)",
                Decimal, min_val=Decimal("10000"),
                default=self.settings.max_loan_amount
            )
            
            self.settings.loan_interest_rate = self.ui.get_input(
                "Taux d'int√©r√™t annuel (ex: 0.045 pour 4.5%)",
                Decimal, min_val=Decimal("0.01"), max_val=Decimal("0.15"),
                default=self.settings.loan_interest_rate
            )
        
        # Configuration IA
        difficulty_options = ["Facile", "Moyen", "Difficile"]
        difficulty_choice = self.ui.show_menu("Difficult√© de l'IA", difficulty_options)
        if difficulty_choice > 0:
            difficulty_map = ["easy", "medium", "hard"]
            self.settings.ai_difficulty = difficulty_map[difficulty_choice - 1]
        
        self.settings.ai_count = self.ui.get_input(
            "Nombre de concurrents IA",
            int, min_val=0, max_val=6,
            default=self.settings.ai_count
        )
        
        self.ui.show_success("Param√®tres de jeu mis √† jour.")
        self.ui.pause()
    
    def _configure_market(self):
        """Configure le march√© et la concurrence."""
        self.ui.clear_screen()
        
        info = [
            "üìä MARCH√â ET CONCURRENCE",
            "",
            "D√©finissez la taille du march√© et l'intensit√© concurrentielle."
        ]
        self.ui.print_box(info, style="header")
        
        self.settings.total_market_size = self.ui.get_input(
            "Taille totale du march√© (clients/tour)",
            int, min_val=100, max_val=2000,
            default=self.settings.total_market_size
        )
        
        self.settings.market_growth_rate = self.ui.get_input(
            "Taux de croissance du march√© par an (ex: 0.02 pour 2%)",
            Decimal, min_val=Decimal("-0.05"), max_val=Decimal("0.10"),
            default=self.settings.market_growth_rate
        )
        
        competition_options = ["Faible", "Normale", "Intense"]
        competition_choice = self.ui.show_menu("Intensit√© concurrentielle", competition_options)
        if competition_choice > 0:
            competition_map = ["low", "normal", "high"]
            self.settings.competition_intensity = competition_map[competition_choice - 1]
        
        self.ui.show_success("Configuration du march√© mise √† jour.")
        self.ui.pause()
    
    def _configure_events(self):
        """Configure les √©v√©nements et le r√©alisme."""
        self.ui.clear_screen()
        
        info = [
            "üéØ √âV√âNEMENTS ET R√âALISME",
            "",
            "Activez les m√©caniques qui rendent le jeu plus r√©aliste."
        ]
        self.ui.print_box(info, style="header")
        
        self.settings.enable_random_events = self.ui.confirm(
            "Activer les √©v√©nements al√©atoires",
            default=self.settings.enable_random_events
        )
        
        if self.settings.enable_random_events:
            self.settings.event_frequency = self.ui.get_input(
                "Fr√©quence des √©v√©nements (ex: 0.15 pour 15% par tour)",
                Decimal, min_val=Decimal("0.05"), max_val=Decimal("0.50"),
                default=self.settings.event_frequency
            )
        
        self.settings.enable_seasonal_effects = self.ui.confirm(
            "Activer les effets saisonniers",
            default=self.settings.enable_seasonal_effects
        )
        
        self.settings.enable_economic_cycles = self.ui.confirm(
            "Activer les cycles √©conomiques",
            default=self.settings.enable_economic_cycles
        )
        
        self.ui.show_success("Configuration des √©v√©nements mise √† jour.")
        self.ui.pause()
    
    def _configure_evaluation(self):
        """Configure l'√©valuation et la notation."""
        self.ui.clear_screen()
        
        info = [
            "üìù √âVALUATION ET NOTATION",
            "",
            "Configurez le syst√®me de notation automatique."
        ]
        self.ui.print_box(info, style="header")
        
        self.settings.enable_scoring = self.ui.confirm(
            "Activer la notation automatique",
            default=self.settings.enable_scoring
        )
        
        if self.settings.enable_scoring:
            print("\nCrit√®res de notation (total doit faire 1.0):")
            
            criteria_names = {
                "survival": "Survie (rester en vie)",
                "profitability": "Rentabilit√© (marge b√©n√©ficiaire)",
                "growth": "Croissance (√©volution CA)",
                "efficiency": "Efficacit√© (ratios de gestion)",
                "strategy": "Strat√©gie (d√©cisions coh√©rentes)"
            }
            
            total_weight = Decimal("0")
            for key, name in criteria_names.items():
                weight = self.ui.get_input(
                    f"Poids pour {name}",
                    Decimal, min_val=Decimal("0"), max_val=Decimal("1"),
                    default=self.settings.scoring_criteria[key]
                )
                self.settings.scoring_criteria[key] = weight
                total_weight += weight
            
            if abs(total_weight - Decimal("1.0")) > Decimal("0.01"):
                self.ui.show_error(f"Le total des poids ({total_weight}) doit faire 1.0")
                self.ui.pause()
                return
        
        self.settings.detailed_feedback = self.ui.confirm(
            "Fournir un feedback d√©taill√© aux √©tudiants",
            default=self.settings.detailed_feedback
        )
        
        self.ui.show_success("Configuration de l'√©valuation mise √† jour.")
        self.ui.pause()
    
    def _configure_restrictions(self):
        """Configure les restrictions et limites."""
        # Implementation simplifi√©e pour l'instant
        self.ui.show_info("Configuration des restrictions - √Ä impl√©menter")
        self.ui.pause()
    
    def _configure_commerce_locations(self):
        """Configure les emplacements de commerce disponibles."""
        # Implementation simplifi√©e pour l'instant
        self.ui.show_info("Configuration des emplacements - √Ä impl√©menter")
        self.ui.pause()
    
    def _save_configuration(self):
        """Sauvegarde la configuration."""
        config_path = Path("admin_configs") / f"{self.settings.session_name.replace(' ', '_')}.yaml"
        config_path.parent.mkdir(exist_ok=True)
        
        # Conversion en dict pour YAML
        config_dict = {
            "session_info": {
                "name": self.settings.session_name,
                "instructor": self.settings.instructor_name,
                "course_code": self.settings.course_code,
                "academic_year": self.settings.academic_year
            },
            "game_params": {
                "max_players": self.settings.max_players,
                "total_turns": self.settings.total_turns,
                "starting_budget_min": float(self.settings.starting_budget_min),
                "starting_budget_max": float(self.settings.starting_budget_max),
                "ai_count": self.settings.ai_count,
                "ai_difficulty": self.settings.ai_difficulty
            },
            "features": {
                "enable_random_events": self.settings.enable_random_events,
                "enable_seasonal_effects": self.settings.enable_seasonal_effects,
                "enable_scoring": self.settings.enable_scoring
            }
        }
        
        try:
            with open(config_path, 'w', encoding='utf-8') as f:
                yaml.dump(config_dict, f, default_flow_style=False, allow_unicode=True)
            
            self.ui.show_success(f"Configuration sauvegard√©e dans {config_path}")
        except Exception as e:
            self.ui.show_error(f"Erreur lors de la sauvegarde: {e}")
        
        self.ui.pause()
    
    def _validate_configuration(self) -> bool:
        """Valide la configuration avant de lancer la partie."""
        errors = []
        
        if not self.settings.session_name.strip():
            errors.append("Le nom de session est requis")
        
        if self.settings.starting_budget_min >= self.settings.starting_budget_max:
            errors.append("Le budget minimum doit √™tre inf√©rieur au maximum")
        
        if self.settings.enable_scoring:
            total_weight = sum(self.settings.scoring_criteria.values())
            if abs(total_weight - Decimal("1.0")) > Decimal("0.01"):
                errors.append("Les poids de notation doivent totaliser 1.0")
        
        if errors:
            error_msg = "Erreurs de configuration:\n" + "\n".join(f"‚Ä¢ {error}" for error in errors)
            self.ui.show_error(error_msg)
            self.ui.pause()
            return False
        
        return True
