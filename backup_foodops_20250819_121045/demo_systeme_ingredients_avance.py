#!/usr/bin/env python3
"""
D√©monstration du syst√®me d'ingr√©dients avanc√© avec qualit√©, saisonnalit√© et stocks.
"""

from decimal import Decimal
from datetime import date, timedelta
from src.foodops_pro.domain.ingredient_quality import (
    IngredientQualityManager, QualityLevel, IngredientRange, 
    IngredientVariant, QUALITY_MODIFIERS
)
from src.foodops_pro.domain.seasonality import SeasonalityManager, Season
from src.foodops_pro.domain.stock_advanced import (
    AdvancedStockManager, AdvancedStockLot, WasteReason
)

def demo_quality_system():
    """D√©monstration du syst√®me de qualit√©."""
    print("üèÜ D√âMONSTRATION DU SYST√àME DE QUALIT√â")
    print("=" * 60)
    
    quality_manager = IngredientQualityManager()
    
    # Afficher les variantes de steak hach√©
    beef_variants = quality_manager.get_variants_for_ingredient("beef_ground")
    
    print("\nü•© VARIANTES DE STEAK HACH√â:")
    for variant in beef_variants:
        base_cost = Decimal("8.50")  # Prix de r√©f√©rence
        final_cost = variant.calculate_final_cost(base_cost)
        
        print(f"\n{variant.display_name}")
        print(f"   Fournisseur: {variant.supplier_id}")
        print(f"   Prix: {final_cost:.2f}‚Ç¨/kg (base: {base_cost:.2f}‚Ç¨)")
        print(f"   Satisfaction: {variant.modifiers.satisfaction_bonus:+.0%}")
        print(f"   Temps pr√©pa: {variant.modifiers.prep_time_multiplier:.0%}")
        print(f"   Certifications: {', '.join(variant.certifications) if variant.certifications else 'Aucune'}")
    
    # Calcul du score de qualit√© d'une recette
    print(f"\nüìä SCORE DE QUALIT√â D'UNE RECETTE:")
    recipe_variants = {
        "beef_ground": beef_variants[1],  # Standard
        "tomato": quality_manager.variants["tomato_terroir_5"]  # Luxe
    }
    
    quality_score = quality_manager.calculate_recipe_quality_score(recipe_variants)
    attractiveness_bonus = quality_manager.get_quality_impact_on_attractiveness(quality_score)
    
    print(f"   Score qualit√©: {quality_score:.1f}/5")
    print(f"   Impact attractivit√©: {(attractiveness_bonus - 1) * 100:+.0f}%")

def demo_seasonality_system():
    """D√©monstration du syst√®me de saisonnalit√©."""
    print("\n\nüå± D√âMONSTRATION DU SYST√àME DE SAISONNALIT√â")
    print("=" * 60)
    
    seasonality_manager = SeasonalityManager()
    
    # Test avec diff√©rentes dates
    test_dates = [
        (date(2024, 7, 15), "√ât√©"),
        (date(2024, 12, 20), "Hiver"),
        (date(2024, 4, 10), "Printemps")
    ]
    
    base_price_tomato = Decimal("3.20")
    
    for test_date, season_name in test_dates:
        print(f"\nüìÖ {season_name} ({test_date.strftime('%d/%m/%Y')}):")
        
        # Prix des tomates selon la saison
        final_price = seasonality_manager.calculate_final_price("tomato", base_price_tomato, test_date)
        quality_bonus = seasonality_manager.get_quality_bonus("tomato", test_date)
        demand_impact = seasonality_manager.get_demand_impact("tomato", test_date)
        
        price_change = (final_price / base_price_tomato - 1) * 100
        
        print(f"   üçÖ Tomates: {final_price:.2f}‚Ç¨/kg ({price_change:+.0f}%)")
        print(f"   Qualit√©: {quality_bonus:+d}‚òÖ")
        print(f"   Demande: {(demand_impact - 1) * 100:+.0f}%")
    
    # R√©sum√© saisonnier actuel
    print(f"\nüìä R√âSUM√â SAISONNIER ACTUEL:")
    summary = seasonality_manager.get_seasonal_summary()
    
    print(f"   Saison: {summary['season'].title()}")
    print(f"   Mois: {summary['month']}")
    
    if summary['in_season']:
        print(f"   üå± Produits de saison (prix r√©duits):")
        for item in summary['in_season']:
            print(f"     ‚Ä¢ {item['ingredient_id']}: -{item['discount']:.0f}%")
    
    if summary['active_events']:
        print(f"   üéâ √âv√©nements actifs:")
        for event in summary['active_events']:
            print(f"     ‚Ä¢ {event['ingredient_id']}: {event['event']} ({event['price_impact']:+.0f}%)")

def demo_stock_management():
    """D√©monstration de la gestion des stocks FEFO."""
    print("\n\nüì¶ D√âMONSTRATION DE LA GESTION DES STOCKS")
    print("=" * 60)
    
    stock_manager = AdvancedStockManager()
    
    # Ajouter des lots avec diff√©rentes dates d'expiration
    today = date.today()
    
    lots = [
        AdvancedStockLot(
            ingredient_id="beef_ground",
            quantity=Decimal("15"),
            unit_cost_ht=Decimal("8.50"),
            purchase_date=today - timedelta(days=1),
            expiry_date=today + timedelta(days=2),  # Expire bient√¥t
            supplier_id="metro_pro",
            lot_number="LOT001"
        ),
        AdvancedStockLot(
            ingredient_id="beef_ground",
            quantity=Decimal("20"),
            unit_cost_ht=Decimal("8.50"),
            purchase_date=today,
            expiry_date=today + timedelta(days=5),  # Plus frais
            supplier_id="metro_pro",
            lot_number="LOT002"
        ),
        AdvancedStockLot(
            ingredient_id="tomato",
            quantity=Decimal("8"),
            unit_cost_ht=Decimal("3.20"),
            purchase_date=today - timedelta(days=3),
            expiry_date=today + timedelta(days=1),  # Expire demain
            supplier_id="rungis_direct",
            lot_number="LOT003"
        )
    ]
    
    for lot in lots:
        stock_manager.add_lot(lot)
    
    print(f"üìä √âTAT INITIAL DES STOCKS:")
    for lot in stock_manager.lots:
        print(f"   {lot.ingredient_id} - Lot {lot.lot_number}: {lot.quantity}kg")
        print(f"     Expire dans {lot.days_until_expiry} jours ({lot.status.value})")
    
    # Test de consommation FEFO
    print(f"\nüçΩÔ∏è CONSOMMATION FEFO (10kg de steak hach√©):")
    quantity_obtained, lots_used = stock_manager.consume_ingredient("beef_ground", Decimal("10"))
    
    print(f"   Quantit√© obtenue: {quantity_obtained}kg")
    print(f"   Lots utilis√©s:")
    for lot in lots_used:
        print(f"     ‚Ä¢ Lot {lot.lot_number}: {lot.quantity}kg restants")
    
    # Simulation des op√©rations quotidiennes
    print(f"\nüìÖ OP√âRATIONS QUOTIDIENNES:")
    daily_report = stock_manager.process_daily_operations()
    
    print(f"   Lots expir√©s: {daily_report['expired_lots']}")
    print(f"   Valeur des pertes: {daily_report['total_waste_value']:.2f}‚Ç¨")
    
    if daily_report['lots_near_expiry']:
        print(f"   ‚ö†Ô∏è Lots proches expiration:")
        for lot in daily_report['lots_near_expiry']:
            print(f"     ‚Ä¢ {lot.ingredient_id} Lot {lot.lot_number}: {lot.days_until_expiry} jours")
    
    if daily_report['promotion_candidates']:
        print(f"   üéØ Candidats promotion:")
        for lot in daily_report['promotion_candidates']:
            promo_price = lot.get_promotion_price(Decimal("12.50"))  # Prix menu burger
            print(f"     ‚Ä¢ {lot.ingredient_id}: Prix promo {promo_price:.2f}‚Ç¨ (-50%)")

def demo_integrated_impact():
    """D√©monstration de l'impact int√©gr√© sur le gameplay."""
    print("\n\nüéÆ IMPACT INT√âGR√â SUR LE GAMEPLAY")
    print("=" * 60)
    
    print(f"üéØ SC√âNARIO: Restaurant 'Chez Mario' en √©t√©")
    print(f"Strat√©gie: Qualit√© premium avec produits de saison")
    
    # Managers
    quality_manager = IngredientQualityManager()
    seasonality_manager = SeasonalityManager()
    
    # Date d'√©t√©
    summer_date = date(2024, 7, 15)
    
    # Recette: Burger aux tomates
    print(f"\nüìã RECETTE: Burger aux tomates premium")
    
    # Choix des ingr√©dients
    beef_premium = quality_manager.variants["beef_ground_bio_4"]
    tomato_local = quality_manager.variants["tomato_terroir_5"]
    
    # Calculs de co√ªts avec saisonnalit√©
    beef_base_cost = Decimal("8.50")
    tomato_base_cost = Decimal("3.20")
    
    beef_final_cost = beef_premium.calculate_final_cost(beef_base_cost)
    tomato_seasonal_cost = seasonality_manager.calculate_final_price("tomato", tomato_base_cost, summer_date)
    tomato_final_cost = tomato_local.calculate_final_cost(tomato_seasonal_cost)
    
    print(f"\nüí∞ CO√õTS DES INGR√âDIENTS:")
    print(f"   ü•© Steak bio: {beef_final_cost:.2f}‚Ç¨/kg (base: {beef_base_cost:.2f}‚Ç¨)")
    print(f"   üçÖ Tomates terroir √©t√©: {tomato_final_cost:.2f}‚Ç¨/kg")
    print(f"      (base: {tomato_base_cost:.2f}‚Ç¨, saison: {tomato_seasonal_cost:.2f}‚Ç¨)")
    
    # Score de qualit√© global
    recipe_variants = {"beef_ground": beef_premium, "tomato": tomato_local}
    quality_score = quality_manager.calculate_recipe_quality_score(recipe_variants)
    attractiveness_bonus = quality_manager.get_quality_impact_on_attractiveness(quality_score)
    
    # Impact saisonnier sur la demande
    tomato_demand_impact = seasonality_manager.get_demand_impact("tomato", summer_date)
    
    print(f"\nüìä IMPACT SUR L'ATTRACTIVIT√â:")
    print(f"   Score qualit√©: {quality_score:.1f}/5 ‚≠ê")
    print(f"   Bonus attractivit√© qualit√©: {(attractiveness_bonus - 1) * 100:+.0f}%")
    print(f"   Bonus demande saisonni√®re: {(tomato_demand_impact - 1) * 100:+.0f}%")
    print(f"   TOTAL: {((attractiveness_bonus * tomato_demand_impact) - 1) * 100:+.0f}%")
    
    print(f"\nüéØ STRAT√âGIE RECOMMAND√âE:")
    print(f"   ‚Ä¢ Prix justifi√©: 16-18‚Ç¨ (qualit√© premium)")
    print(f"   ‚Ä¢ Communication: 'Tomates du terroir d'√©t√©'")
    print(f"   ‚Ä¢ Positionnement: Restaurant gastronomique")
    print(f"   ‚Ä¢ ROI: Marge √©lev√©e compensant co√ªts premium")

def main():
    """D√©monstration compl√®te du syst√®me d'ingr√©dients avanc√©."""
    print("üéÆ D√âMONSTRATION SYST√àME D'INGR√âDIENTS AVANC√â")
    print("=" * 70)
    
    try:
        demo_quality_system()
        demo_seasonality_system()
        demo_stock_management()
        demo_integrated_impact()
        
        print("\n\nüéâ CONCLUSION:")
        print("=" * 30)
        print("‚úÖ Syst√®me de qualit√© op√©rationnel")
        print("‚úÖ Saisonnalit√© impl√©ment√©e")
        print("‚úÖ Gestion FEFO fonctionnelle")
        print("‚úÖ Impact gameplay int√©gr√©")
        print("üéØ Le jeu offre maintenant une vraie diff√©renciation !")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©monstration: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
