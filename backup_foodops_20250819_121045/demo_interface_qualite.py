#!/usr/bin/env python3
"""
D√©monstration de l'interface qualit√© pour FoodOps Pro.
"""


def demo_interface_choix_qualite():
    """Simule l'interface de choix de qualit√©."""
    print("üéÆ D√âMONSTRATION INTERFACE QUALIT√â FOODOPS PRO")
    print("=" * 80)

    print("\nüõí CHOIX QUALIT√â DES INGR√âDIENTS")
    print("=" * 50)

    # √âtat actuel simul√©
    print("\nüìä QUALIT√â ACTUELLE: ‚≠ê‚≠ê Standard (2.3/5)")
    print("üí∞ Impact co√ªt: 100%")
    print("‚≠ê R√©putation: 5.2/10")

    print("\nüéØ NIVEAUX DE QUALIT√â DISPONIBLES:")
    print("   1‚≠ê √âconomique (-30% co√ªt, -20% satisfaction)")
    print("   2‚≠ê Standard (prix de r√©f√©rence)")
    print("   3‚≠ê Sup√©rieur (+25% co√ªt, +15% satisfaction)")
    print("   4‚≠ê Premium (+50% co√ªt, +30% satisfaction)")
    print("   5‚≠ê Luxe (+100% co√ªt, +50% satisfaction)")

    # Simulation des choix
    ingredients = [
        ("ü•© Viande (b≈ìuf hach√©)", 2, 4),
        ("üçÖ L√©gumes (tomates)", 2, 3),
        ("üßÄ Fromage (mozzarella)", 2, 3),
        ("üåæ F√©culents (farine)", 2, 2),
    ]

    print("\nüìã CONFIGURATION DES INGR√âDIENTS:")
    print("-" * 60)

    total_cost_impact = 0
    ingredient_count = 0

    for name, current, new in ingredients:
        cost_change = ""
        if new > current:
            cost_change = f" (+{(new - current) * 25}% co√ªt)"
        elif new < current:
            cost_change = f" ({(new - current) * 25}% co√ªt)"

        stars_current = "‚≠ê" * current
        stars_new = "‚≠ê" * new

        print(f"{name} (actuel: {current}‚≠ê)")
        print(f"   Nouveau niveau: {new} {stars_new}{cost_change}")

        if new != current:
            print(f"   ‚úÖ Mis √† jour: {stars_current} ‚Üí {stars_new}")
        else:
            print(f"   ‚è≠Ô∏è Inchang√©")

        # Calcul impact co√ªt
        cost_multipliers = {1: 0.70, 2: 1.00, 3: 1.25, 4: 1.50, 5: 2.00}
        total_cost_impact += cost_multipliers[new]
        ingredient_count += 1

        print()

    # Calcul des nouvelles m√©triques
    avg_quality = sum([new for _, _, new in ingredients]) / len(ingredients)
    avg_cost_impact = total_cost_impact / ingredient_count

    print("üìà IMPACT DES CHANGEMENTS:")
    print(f"   Qualit√©: 2.3/5 ‚Üí {avg_quality:.1f}/5")
    print(f"   Co√ªt mati√®res: 100% ‚Üí {avg_cost_impact:.0%}")

    if avg_quality >= 4.5:
        quality_desc = "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Luxe"
    elif avg_quality >= 3.5:
        quality_desc = "‚≠ê‚≠ê‚≠ê‚≠ê Premium"
    elif avg_quality >= 2.5:
        quality_desc = "‚≠ê‚≠ê‚≠ê Sup√©rieur"
    else:
        quality_desc = "‚≠ê‚≠ê Standard"

    print(f"   Description: {quality_desc}")
    print("\n‚úÖ Choix de qualit√© enregistr√©s !")


def demo_rapport_qualite_prix():
    """Simule le rapport qualit√©/prix."""
    print("\n\nüìä RAPPORT QUALIT√â/PRIX D√âTAILL√â")
    print("=" * 60)

    print("üìà M√âTRIQUES QUALIT√â ACTUELLES:")
    print("")
    print("Score qualit√© global: ‚≠ê‚≠ê‚≠ê Sup√©rieur (3.2/5)")
    print("Impact sur co√ªts: 125%")
    print("Satisfaction client: 3.8/5")
    print("R√©putation: 6.4/10")
    print("Ticket moyen: 14.50‚Ç¨")
    print("")
    print("üéØ ATTRACTIVIT√â PAR SEGMENT:")
    print("")
    print("‚Ä¢ √âtudiants: 95% (sensibilit√© faible)")
    print("‚Ä¢ Familles: 115% (sensibilit√© normale)")
    print("‚Ä¢ Foodies: 148% (sensibilit√© √©lev√©e)")
    print("")
    print("üí∞ ANALYSE CO√õT/B√âN√âFICE:")
    print("")
    print("üìà SIMULATION AM√âLIORATION (+1 niveau qualit√©):")
    print("‚Ä¢ Co√ªt suppl√©mentaire estim√©: +25%")
    print("‚Ä¢ Satisfaction suppl√©mentaire: +15%")
    print("‚Ä¢ Nouvelle attractivit√© foodies: +23%")
    print("")
    print("üéØ RECOMMANDATIONS PERSONNALIS√âES:")
    print("")
    print("üü° OPPORTUNIT√â: Diff√©renciation qualit√©")
    print("‚Ä¢ Cibler les foodies avec du premium (4‚≠ê)")
    print("‚Ä¢ Excellent rapport qualit√©/prix: potentiel hausse prix")
    print("")
    print("ü•ò D√âTAIL INGR√âDIENTS:")
    print("")
    print("‚Ä¢ Viande: ‚≠ê‚≠ê‚≠ê‚≠ê (niveau 4)")
    print("‚Ä¢ L√©gumes: ‚≠ê‚≠ê‚≠ê (niveau 3)")
    print("‚Ä¢ Fromage: ‚≠ê‚≠ê‚≠ê (niveau 3)")
    print("‚Ä¢ F√©culents: ‚≠ê‚≠ê (niveau 2)")


def demo_resultats_simulation():
    """Simule les r√©sultats d'une simulation avec qualit√©."""
    print("\n\nüìä R√âSULTATS SIMULATION AVEC QUALIT√â")
    print("=" * 80)

    restaurants = [
        {
            "name": "Quick & Cheap",
            "type": "fast",
            "quality": "‚≠ê √âconomique",
            "price": 8.50,
            "clients": 168,
            "ca": 1428,
            "profit": 485,
            "satisfaction": 2.1,
            "reputation": 4.2,
            "market_share": 28.5,
        },
        {
            "name": "Burger Standard",
            "type": "classic",
            "quality": "‚≠ê‚≠ê Standard",
            "price": 12.50,
            "clients": 142,
            "ca": 1775,
            "profit": 623,
            "satisfaction": 3.2,
            "reputation": 5.8,
            "market_share": 24.1,
        },
        {
            "name": "Gourmet Express",
            "type": "classic",
            "quality": "‚≠ê‚≠ê‚≠ê‚≠ê Premium",
            "price": 18.50,
            "clients": 156,
            "ca": 2886,
            "profit": 1155,
            "satisfaction": 4.1,
            "reputation": 7.3,
            "market_share": 26.5,
        },
        {
            "name": "Artisan Bistro",
            "type": "gastronomique",
            "quality": "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Luxe",
            "price": 28.50,
            "clients": 124,
            "ca": 3534,
            "profit": 1238,
            "satisfaction": 4.8,
            "reputation": 8.9,
            "market_share": 21.0,
        },
    ]

    print("R√âSULTATS TOUR 3 - JUILLET (BONUS SAISONNIER √âT√â)")
    print("-" * 120)
    print(
        f"{'Restaurant':<18} | {'Type':<12} | {'Qualit√©':<15} | {'Prix':<6} | {'Clients':<7} | {'CA ‚Ç¨':<8} | {'Profit ‚Ç¨':<9} | {'Satisf.':<7} | {'R√©putation':<10} | {'Part %':<6}"
    )
    print("-" * 120)

    for r in restaurants:
        print(
            f"{r['name']:<18} | {r['type']:<12} | {r['quality']:<15} | {r['price']:>5.2f}‚Ç¨ | {r['clients']:>7} | {r['ca']:>8} | {r['profit']:>9} | {r['satisfaction']:>6.1f}/5 | {r['reputation']:>9.1f}/10 | {r['market_share']:>5.1f}"
        )

    print("-" * 120)

    total_clients = sum(r["clients"] for r in restaurants)
    total_ca = sum(r["ca"] for r in restaurants)
    total_profit = sum(r["profit"] for r in restaurants)

    print(
        f"{'TOTAL':<18} | {'':>12} | {'':>15} | {'':>6} | {total_clients:>7} | {total_ca:>8} | {total_profit:>9} | {'':>7} | {'':>10} | {'100.0':>5}"
    )

    print(f"\nüí° INSIGHTS STRAT√âGIQUES:")
    print(f"‚Ä¢ Le restaurant PREMIUM g√©n√®re le plus de profit malgr√© un co√ªt +50%")
    print(f"‚Ä¢ La qualit√© LUXE attire moins de clients mais avec un ticket tr√®s √©lev√©")
    print(f"‚Ä¢ L'√âCONOMIQUE a le plus de clients mais la plus faible marge")
    print(f"‚Ä¢ La r√©putation √©volue selon la satisfaction client")
    print(f"‚Ä¢ Chaque strat√©gie qualit√© a sa place sur le march√© !")


def demo_evolution_reputation():
    """Simule l'√©volution de la r√©putation."""
    print(f"\n\nüìà √âVOLUTION R√âPUTATION SUR 10 TOURS")
    print("=" * 60)

    # Donn√©es simul√©es pour 3 restaurants
    tours_data = [
        # Quick & Cheap (√©conomique)
        {
            "name": "Quick & Cheap",
            "tours": [4.2, 4.1, 4.0, 4.1, 4.0, 3.9, 4.0, 4.1, 4.0, 4.1],
        },
        # Gourmet Express (premium)
        {
            "name": "Gourmet Express",
            "tours": [5.8, 6.2, 6.5, 6.8, 7.0, 7.2, 7.3, 7.4, 7.5, 7.6],
        },
        # Artisan Bistro (luxe)
        {
            "name": "Artisan Bistro",
            "tours": [7.5, 7.8, 8.1, 8.3, 8.5, 8.6, 8.7, 8.8, 8.9, 9.0],
        },
    ]

    print(
        f"{'Tour':<6} | {'Quick & Cheap':<13} | {'Gourmet Express':<15} | {'Artisan Bistro':<14}"
    )
    print("-" * 60)

    for tour in range(10):
        line = f"{tour + 1:<6}"
        for resto_data in tours_data:
            reputation = resto_data["tours"][tour]
            line += f" | {reputation:<13.1f}"
        print(line)

    print("-" * 60)
    print(f"{'√âvol.':<6}", end="")
    for resto_data in tours_data:
        evolution = resto_data["tours"][-1] - resto_data["tours"][0]
        print(f" | {evolution:+12.1f}", end="")
    print()

    print(f"\nüí° OBSERVATIONS:")
    print(f"‚Ä¢ Restaurant premium: R√©putation en croissance constante")
    print(f"‚Ä¢ Restaurant luxe: R√©putation √©lev√©e et stable")
    print(f"‚Ä¢ Restaurant √©conomique: R√©putation faible mais stable")
    print(f"‚Ä¢ La qualit√© impacte directement la r√©putation long terme")


def main():
    """D√©monstration compl√®te de l'interface."""
    demo_interface_choix_qualite()
    demo_rapport_qualite_prix()
    demo_resultats_simulation()
    demo_evolution_reputation()

    print(f"\n\nüéâ SYST√àME QUALIT√â FOODOPS PRO - INT√âGRATION COMPL√àTE")
    print("=" * 80)
    print("‚úÖ Interface de choix qualit√© intuitive")
    print("‚úÖ Rapport qualit√©/prix d√©taill√© avec recommandations")
    print("‚úÖ Impact visible sur r√©sultats de simulation")
    print("‚úÖ √âvolution r√©putation r√©aliste")
    print("‚úÖ Diff√©renciation strat√©gique op√©rationnelle")
    print("‚úÖ Saisonnalit√© int√©gr√©e automatiquement")
    print("")
    print("üéØ FoodOps Pro offre maintenant un gameplay √©ducatif")
    print("   complet sur les vrais enjeux qualit√©/prix de la restauration !")
    print("")
    print("üöÄ Pr√™t pour utilisation en formation professionnelle !")


if __name__ == "__main__":
    main()
