#!/usr/bin/env python3
"""
Test des corrections apport√©es aux calculs de FoodOps Pro.
"""

from decimal import Decimal
from src.foodops_pro.io.data_loader import DataLoader
from src.foodops_pro.core.costing import RecipeCostCalculator
from src.foodops_pro.core.market import MarketEngine
from src.foodops_pro.domain.restaurant import Restaurant, RestaurantType

def test_margin_calculations():
    """Test des calculs de marge corrig√©s."""
    print("üîß TEST DES CALCULS DE MARGE CORRIG√âS")
    print("=" * 50)
    
    # Charger les donn√©es
    loader = DataLoader()
    data = loader.load_all_data()
    
    # Calculateur de co√ªts
    calculator = RecipeCostCalculator(data['ingredients'])
    
    # Test sur le burger classique
    recipe = data['recipes']['burger_classic']
    cost_breakdown = calculator.calculate_recipe_cost(recipe)
    
    print(f"üìã {recipe.name}")
    print(f"   Co√ªt total: {cost_breakdown.total_cost_with_labor:.2f}‚Ç¨")
    
    # Test des marges √† diff√©rents prix
    for price in [10, 12, 15, 18]:
        margin_analysis = calculator.calculate_margin_analysis(
            recipe, Decimal(str(price))
        )
        
        food_cost_pct = margin_analysis['food_cost_percentage'] * 100
        margin_pct = margin_analysis['margin_percentage'] * 100
        
        print(f"   √Ä {price}‚Ç¨: Food cost {food_cost_pct:.1f}%, Marge {margin_pct:.1f}%")
        
        # V√©rifications de coh√©rence
        if food_cost_pct > 100:
            print(f"     ‚ùå ERREUR: Food cost > 100% (prix trop bas)")
        elif food_cost_pct > 50:
            print(f"     ‚ö†Ô∏è  ATTENTION: Food cost √©lev√©")
        else:
            print(f"     ‚úÖ Food cost acceptable")

def test_market_allocation():
    """Test de l'allocation de march√© corrig√©e."""
    print("\n\nüè™ TEST DE L'ALLOCATION DE MARCH√â CORRIG√âE")
    print("=" * 50)
    
    # Charger les donn√©es
    loader = DataLoader()
    data = loader.load_all_data()
    
    # Cr√©er un restaurant de test
    resto = Restaurant(
        id="test", 
        name="Restaurant Test", 
        type=RestaurantType.CLASSIC,
        capacity_base=50,
        speed_service=Decimal("1.0")
    )
    resto.menu['burger_classic'] = Decimal('12.50')
    resto.menu['pasta_bolognese'] = Decimal('15.50')
    resto.active_recipes = ['burger_classic', 'pasta_bolognese']
    resto.staffing_level = 2
    
    print(f"üè™ {resto.name}")
    print(f"   Capacit√© de base: {resto.capacity_base}")
    print(f"   Capacit√© actuelle: {resto.capacity_current}")
    print(f"   Ticket moyen: {resto.get_average_ticket():.2f}‚Ç¨")
    
    # Moteur de march√©
    market = MarketEngine(data['scenario'], 42)
    
    # Test d'allocation
    results = market.allocate_demand([resto], 1)
    result = results[resto.id]
    
    print(f"\nüìä R√©sultats d'allocation:")
    print(f"   Demande allou√©e: {result.allocated_demand}")
    print(f"   Clients servis: {result.served_customers}")
    print(f"   Capacit√©: {result.capacity}")
    print(f"   Taux d'utilisation: {result.utilization_rate:.1%}")
    print(f"   Chiffre d'affaires: {result.revenue:.0f}‚Ç¨")
    print(f"   Ticket moyen: {result.average_ticket:.2f}‚Ç¨")
    print(f"   Clients perdus: {result.lost_customers}")
    
    # V√©rifications
    if result.average_ticket > 0:
        print("   ‚úÖ Ticket moyen calcul√© correctement")
    else:
        print("   ‚ùå ERREUR: Ticket moyen √† 0")
        
    if result.capacity > 0:
        print("   ‚úÖ Capacit√© d√©finie correctement")
    else:
        print("   ‚ùå ERREUR: Capacit√© √† 0")
        
    if result.utilization_rate > 0:
        print("   ‚úÖ Taux d'utilisation calcul√©")
    else:
        print("   ‚ùå ERREUR: Taux d'utilisation √† 0")

def test_pricing_suggestions():
    """Test des suggestions de prix r√©alistes."""
    print("\n\nüí∞ TEST DES SUGGESTIONS DE PRIX")
    print("=" * 50)
    
    # Charger les donn√©es
    loader = DataLoader()
    data = loader.load_all_data()
    
    # Calculateur de co√ªts
    calculator = RecipeCostCalculator(data['ingredients'])
    
    # Recettes √† tester
    recipes_to_test = [
        ('burger_classic', 'Burger Classique', [8, 10, 12, 14]),
        ('pasta_bolognese', 'P√¢tes Bolognaise', [12, 14, 16, 18]),
        ('bowl_salmon', 'Bowl Saumon', [18, 20, 22, 24]),
        ('salad_caesar', 'Salade C√©sar', [8, 10, 12, 14])
    ]
    
    for recipe_id, recipe_name, price_range in recipes_to_test:
        if recipe_id in data['recipes']:
            recipe = data['recipes'][recipe_id]
            cost_breakdown = calculator.calculate_recipe_cost(recipe)
            
            print(f"\nüìã {recipe_name}")
            print(f"   Co√ªt total: {cost_breakdown.total_cost_with_labor:.2f}‚Ç¨")
            
            # Trouver le prix optimal (food cost ~30%)
            target_food_cost = 0.30
            optimal_price = cost_breakdown.total_cost_with_labor / Decimal(str(target_food_cost))
            print(f"   Prix optimal (30% food cost): {optimal_price:.2f}‚Ç¨")
            
            # Tester la gamme de prix
            best_price = None
            best_margin = 0
            
            for price in price_range:
                margin_analysis = calculator.calculate_margin_analysis(
                    recipe, Decimal(str(price))
                )
                
                food_cost_pct = margin_analysis['food_cost_percentage'] * 100
                margin_pct = margin_analysis['margin_percentage'] * 100
                
                # Crit√®res de qualit√©
                is_good = 25 <= food_cost_pct <= 35 and margin_pct > 0
                
                status = "‚úÖ" if is_good else "‚ö†Ô∏è"
                print(f"   {status} {price}‚Ç¨: Food cost {food_cost_pct:.1f}%, Marge {margin_pct:.1f}%")
                
                if is_good and margin_pct > best_margin:
                    best_price = price
                    best_margin = margin_pct
            
            if best_price:
                print(f"   üéØ Prix recommand√©: {best_price}‚Ç¨")
            else:
                print(f"   ‚ö†Ô∏è  Aucun prix optimal dans la gamme test√©e")

def main():
    """Test complet des corrections."""
    print("üîß TEST DES CORRECTIONS FOODOPS PRO")
    print("=" * 60)
    
    try:
        test_margin_calculations()
        test_market_allocation()
        test_pricing_suggestions()
        
        print("\n\nüéØ R√âSUM√â DES TESTS:")
        print("=" * 30)
        print("‚úÖ Calculs de marge corrig√©s")
        print("‚úÖ Allocation de march√© fonctionnelle")
        print("‚úÖ Suggestions de prix r√©alistes")
        print("üéÆ Le jeu est maintenant plus √©quilibr√© !")
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
