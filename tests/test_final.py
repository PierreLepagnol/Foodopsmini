#!/usr/bin/env python3
"""
Test final pour v√©rifier que tous les syst√®mes de FoodOps Pro fonctionnent.
"""

print("=== TEST FINAL FOODOPS PRO ===")

try:
    # Test 1: Chargement des donn√©es
    print("1. Test chargement des donn√©es...")
    from src.foodops_pro.io.data_loader import DataLoader

    loader = DataLoader()
    data = loader.load_all_data()
    print(f"   ‚úì {len(data['ingredients'])} ingr√©dients charg√©s")
    print(f"   ‚úì {len(data['recipes'])} recettes charg√©es")
    print(f"   ‚úì {len(data['suppliers'])} fournisseurs charg√©s")
    print(f"   ‚úì Sc√©nario '{data['scenario'].name}' charg√©")

    # Test 2: Calcul de co√ªts
    print("\n2. Test calcul de co√ªts...")
    from src.foodops_pro.core.costing import RecipeCostCalculator

    calculator = RecipeCostCalculator(data["ingredients"])
    burger_recipe = data["recipes"]["burger_classic"]
    breakdown = calculator.calculate_recipe_cost(burger_recipe)
    print(f"   ‚úì Burger classique: {breakdown.cost_per_portion:.2f}‚Ç¨ par portion")
    print(f"   ‚úì Co√ªt total avec MO: {breakdown.total_cost_with_labor:.2f}‚Ç¨")

    # Test 3: Simulation de march√©
    print("\n3. Test simulation de march√©...")
    from src.foodops_pro.core.market import MarketEngine
    from src.foodops_pro.domain.restaurant import Restaurant, RestaurantType
    from decimal import Decimal

    restaurant = Restaurant(
        id="test",
        name="Test Restaurant",
        type=RestaurantType.CLASSIC,
        capacity_base=50,
        speed_service=Decimal("1.0"),
        staffing_level=2,
    )
    restaurant.set_recipe_price("burger_classic", Decimal("12.50"))
    restaurant.activate_recipe("burger_classic")

    market = MarketEngine(data["scenario"], 42)
    results = market.allocate_demand([restaurant], 1)
    result = results["test"]

    print(
        f"   ‚úì {result.served_customers} clients servis sur {result.capacity} de capacit√©"
    )
    print(f"   ‚úì Chiffre d'affaires: {result.revenue:.0f}‚Ç¨")

    # Test 4: Comptabilit√©
    print("\n4. Test comptabilit√©...")
    from src.foodops_pro.core.ledger import Ledger, VATCalculator

    ledger = Ledger()

    # Enregistrement d'une vente
    ledger.record_sale(Decimal("110.00"), Decimal("0.10"), None, "Test vente")
    vat_collected = ledger.get_balance("44571")
    print(f"   ‚úì TVA collect√©e: {vat_collected:.2f}‚Ç¨")

    # Test 5: Paie fran√ßaise
    print("\n5. Test paie fran√ßaise...")
    from src.foodops_pro.core.payroll import PayrollCalculator
    from src.foodops_pro.domain.employee import (
        Employee,
        EmployeePosition,
        EmployeeContract,
    )

    hr_config = data["hr_tables"]["social_charges"]
    payroll_calc = PayrollCalculator(hr_config)

    employee = Employee(
        id="test_emp",
        name="Test Employee",
        position=EmployeePosition.CUISINE,
        contract=EmployeeContract.CDI,
        salary_gross_monthly=Decimal("2200.00"),
    )

    payroll_result = payroll_calc.calculate_payroll(employee)
    print(f"   ‚úì Salaire brut: {payroll_result.gross_salary:.0f}‚Ç¨")
    print(f"   ‚úì Salaire net: {payroll_result.net_salary:.0f}‚Ç¨")
    print(f"   ‚úì Co√ªt total employeur: {payroll_result.total_cost:.0f}‚Ç¨")

    print("\n‚úÖ TOUS LES SYST√àMES FONCTIONNENT PARFAITEMENT !")
    print("\nüéÆ Pour jouer, lancez : python -m src.foodops_pro.cli")
    print("üìä Legacy demo available in legacy/demos/demo.py")

except Exception as e:
    print(f"\n‚ùå Erreur durant le test : {e}")
    import traceback

    traceback.print_exc()
