"""Mod√®les des articles de menu vendables"""

from decimal import Decimal
from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field

from game_engine.domain.menu.recipe import Recipe
from game_engine.domain.types import RestaurantType


class MenuItemStatus(Enum):
    """
    √ânum√©ration des statuts possibles pour un article de menu.

    D√©finit tous les √©tats possibles d'un article dans le cycle de vie
    du menu, de sa cr√©ation √† sa suppression.

    Values:
        AVAILABLE: Article disponible √† la commande
        UNAVAILABLE: Temporairement indisponible (rupture stock)
        SEASONAL: Disponible selon la saison
        DISCONTINUED: D√©finitivement arr√™t√©
        COMING_SOON: Annonc√© mais pas encore disponible
    """

    AVAILABLE = "available"  # Disponible
    UNAVAILABLE = "unavailable"  # Indisponible (rupture de stock)
    SEASONAL = "seasonal"  # Saisonnier
    DISCONTINUED = "discontinued"  # Arr√™t√©
    COMING_SOON = "coming_soon"  # Bient√¥t disponible


class MenuCategory(Enum):
    """Cat√©gories d'articles de menu."""

    APPETIZER = "entree"
    MAIN_COURSE = "plat"
    DESSERT = "dessert"
    BEVERAGE = "boisson"
    SIDE = "accompagnement"
    SPECIAL = "special"


class PricingStrategy(Enum):
    """Strat√©gies de tarification."""

    COST_PLUS = "cost_plus"  # Co√ªt + marge fixe
    COMPETITIVE = "competitive"  # Align√© sur la concurrence
    PREMIUM = "premium"  # Prix premium
    PENETRATION = "penetration"  # Prix d'appel
    VALUE = "value"  # Rapport qualit√©-prix


class MenuItem(BaseModel):
    """
    Article de menu vendable avec tarification et positionnement.

    Attributes:
        id: Identifiant unique de l'article
        name: Nom commercial de l'article
        description: Description pour les clients
        recipe: Recette associ√©e
        category: Cat√©gorie de menu
        price_ttc: Prix de vente TTC
        vat_rate: Taux de TVA applicable
        status: Statut de disponibilit√©
        pricing_strategy: Strat√©gie de tarification
        target_margin_percentage: Marge cible en pourcentage
        position_in_menu: Position dans le menu (pour l'affichage)
        is_signature: Article signature du restaurant
        allergens: Liste des allerg√®nes
        dietary_info: Informations di√©t√©tiques (v√©g√©tarien, etc.)
    """

    id: str
    name: str
    description: str = ""
    recipe: Recipe
    category: MenuCategory
    price_ttc: Decimal = Field(gt=0, description="Le prix doit √™tre positif")
    vat_rate: Decimal = Field(default=Decimal("0.10"), description="Taux de TVA")
    status: MenuItemStatus = MenuItemStatus.AVAILABLE
    pricing_strategy: PricingStrategy = PricingStrategy.COST_PLUS
    target_margin_percentage: Decimal = Field(
        default=Decimal("70"), ge=0, le=100, description="Marge cible en pourcentage"
    )
    position_in_menu: int = Field(default=0, ge=0)
    is_signature: bool = False
    allergens: list[str] = Field(default_factory=list)
    dietary_info: list[str] = Field(default_factory=list)

    @property
    def price_ht(self) -> Decimal:
        """Prix hors taxes."""
        return self.price_ttc / (1 + self.vat_rate)

    @property
    def display_name(self) -> str:
        """Nom d'affichage avec indicateurs."""
        name = self.name
        if self.is_signature:
            name = f"‚≠ê {name}"
        if self.status == MenuItemStatus.SEASONAL:
            name = f"{name} üçÇ"
        return name

    @property
    def is_available(self) -> bool:
        """V√©rifie si l'article est disponible √† la vente."""
        return self.status in [MenuItemStatus.AVAILABLE, MenuItemStatus.SEASONAL]

    def calculate_food_cost_percentage(
        self, recipe_cost_per_portion: Decimal
    ) -> Decimal:
        """
        Calcule le ratio food cost, indicateur cl√© de rentabilit√©.

        Le food cost exprime le co√ªt des mati√®res premi√®res en pourcentage
        du prix de vente HT. C'est un KPI fondamental en restauration.

        Args:
            recipe_cost_per_portion: Co√ªt des ingr√©dients par portion

        Returns:
            Pourcentage du food cost (0-100%)
            Retourne 100% si le prix HT est nul ou n√©gatif

        Example:
            Si co√ªt = 3‚Ç¨ et prix HT = 10‚Ç¨
            Retourne 30% (food cost acceptable)
        """
        if self.price_ht <= 0:
            return Decimal("100")
        return (recipe_cost_per_portion / self.price_ht) * 100

    def calculate_margin_ht(self, recipe_cost_per_portion: Decimal) -> Decimal:
        """
        Calcule la marge brute hors taxes par unit√© vendue.

        La marge repr√©sente le b√©n√©fice brut avant d√©duction des charges
        variables et fixes (personnel, loyer, etc.).

        Args:
            recipe_cost_per_portion: Co√ªt des ingr√©dients par portion

        Returns:
            Marge en euros HT

        Note:
            Cette marge ne tient compte que du co√ªt des ingr√©dients,
            pas des co√ªts de main-d'≈ìuvre ou autres charges.
        """
        return self.price_ht - recipe_cost_per_portion

    def suggest_price_for_target_margin(
        self,
        recipe_cost_per_portion: Decimal,
        target_food_cost_percentage: Decimal = Decimal("30"),
    ) -> Decimal:
        """
        Calcule le prix de vente optimal pour un objectif de food cost.

        Applique la formule inverse du food cost pour d√©terminer le prix
        qui permettra d'atteindre l'objectif de rentabilit√© souhait√©.

        Args:
            recipe_cost_per_portion: Co√ªt des ingr√©dients par portion
            target_food_cost_percentage: Objectif de food cost (d√©faut: 30%)

        Returns:
            Prix TTC sugg√©r√© pour atteindre l'objectif

        Raises:
            ValueError: Si le pourcentage cible est n√©gatif ou nul

        Example:
            Co√ªt = 3‚Ç¨, objectif = 30%
            Prix HT = 3‚Ç¨ / 0.30 = 10‚Ç¨
            Prix TTC = 10‚Ç¨ * 1.10 = 11‚Ç¨
        """
        if target_food_cost_percentage <= 0:
            raise ValueError("Le pourcentage de food cost cible doit √™tre positif")

        suggested_price_ht = recipe_cost_per_portion / (
            target_food_cost_percentage / 100
        )
        return suggested_price_ht * (1 + self.vat_rate)

    def get_competitive_price_range(
        self, market_low: Decimal, market_high: Decimal
    ) -> tuple[Decimal, Decimal]:
        """
        Calcule la fourchette de prix comp√©titive.

        Args:
            market_low: Prix le plus bas du march√©
            market_high: Prix le plus haut du march√©

        Returns:
            Tuple (prix_min, prix_max) pour rester comp√©titif
        """
        # Strat√©gie selon le positionnement
        if self.pricing_strategy == PricingStrategy.PENETRATION:
            return market_low * Decimal("0.9"), market_low * Decimal("1.1")
        elif self.pricing_strategy == PricingStrategy.PREMIUM:
            return market_high * Decimal("0.9"), market_high * Decimal("1.2")
        else:  # COMPETITIVE ou VALUE
            market_mid = (market_low + market_high) / 2
            return market_mid * Decimal("0.9"), market_mid * Decimal("1.1")

    def adapt_to_restaurant_type(self, restaurant_type: RestaurantType) -> None:
        """
        Adapte l'article selon le type de restaurant.

        Args:
            restaurant_type: Type de restaurant
        """
        # Ajustements selon le type de restaurant
        if restaurant_type == RestaurantType.FAST:
            self.pricing_strategy = PricingStrategy.VALUE
            self.target_margin_percentage = Decimal("60")
        elif restaurant_type == RestaurantType.GASTRONOMIQUE:
            self.pricing_strategy = PricingStrategy.PREMIUM
            self.target_margin_percentage = Decimal("80")
        elif restaurant_type == RestaurantType.BRASSERIE:
            self.pricing_strategy = PricingStrategy.COMPETITIVE
            self.target_margin_percentage = Decimal("70")
        else:  # CLASSIC
            self.pricing_strategy = PricingStrategy.COST_PLUS
            self.target_margin_percentage = Decimal("70")

    def __str__(self) -> str:
        return f"{self.display_name} - {self.price_ttc:.2f}‚Ç¨ ({self.category.value})"


class MenuItemBuilder:
    """Constructeur d'articles de menu."""

    @staticmethod
    def from_recipe(
        recipe: Recipe, base_price_ttc: Decimal, category: Optional[MenuCategory] = None
    ) -> MenuItem:
        """
        Cr√©e un article de menu √† partir d'une recette.

        Args:
            recipe: Recette de base
            base_price_ttc: Prix de base TTC
            category: Cat√©gorie (d√©duite si non fournie)

        Returns:
            Article de menu cr√©√©
        """
        # D√©duction de la cat√©gorie si non fournie
        if category is None:
            category_mapping = {
                "entree": MenuCategory.APPETIZER,
                "plat": MenuCategory.MAIN_COURSE,
                "dessert": MenuCategory.DESSERT,
                "boisson": MenuCategory.BEVERAGE,
                "accompagnement": MenuCategory.SIDE,
            }
            category = category_mapping.get(recipe.category, MenuCategory.MAIN_COURSE)

        return MenuItem(
            id=f"menu_{recipe.id}",
            name=recipe.name,
            description=recipe.description,
            recipe=recipe,
            category=category,
            price_ttc=base_price_ttc,
        )

    @staticmethod
    def create_signature_item(
        recipe: Recipe,
        name: str,
        description: str,
        price_ttc: Decimal,
        category: MenuCategory,
    ) -> MenuItem:
        """
        Cr√©e un article signature.

        Args:
            recipe: Recette de base
            name: Nom commercial
            description: Description marketing
            price_ttc: Prix TTC
            category: Cat√©gorie

        Returns:
            Article signature
        """
        item = MenuItem(
            id=f"signature_{recipe.id}",
            name=name,
            description=description,
            recipe=recipe,
            category=category,
            price_ttc=price_ttc,
            is_signature=True,
            pricing_strategy=PricingStrategy.PREMIUM,
            target_margin_percentage=Decimal("80"),
        )
        return item
