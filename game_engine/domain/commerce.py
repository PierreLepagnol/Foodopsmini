"""
Syst√®me de fonds de commerce pour FoodOps Pro.
"""

from dataclasses import dataclass
from typing import List, Optional
from decimal import Decimal
from enum import Enum

from game_engine.domain.restaurant import RestaurantType
from game_engine.ui.console_ui import print_box


class LocationType(Enum):
    """Types d'emplacements."""

    CENTRE_VILLE = "centre_ville"
    BANLIEUE = "banlieue"
    ZONE_COMMERCIALE = "zone_commerciale"
    QUARTIER_ETUDIANT = "quartier_etudiant"
    ZONE_INDUSTRIELLE = "zone_industrielle"


class CommerceCondition(Enum):
    """√âtat du fonds de commerce."""

    EXCELLENT = "excellent"
    BON = "bon"
    CORRECT = "correct"
    RENOVATION_LEGERE = "renovation_legere"
    RENOVATION_LOURDE = "renovation_lourde"


@dataclass
class CommerceLocation:
    """
    Fonds de commerce disponible √† l'achat.

    Attributes:
        id: Identifiant unique
        name: Nom du commerce
        location_type: Type d'emplacement
        restaurant_type: Type de restaurant recommand√©
        price: Prix d'achat du fonds
        size: Nombre de couverts
        condition: √âtat du local
        equipment_included: √âquipements inclus
        rent_monthly: Loyer mensuel
        lease_years: Dur√©e du bail restante
        foot_traffic: Niveau de passage
        competition_nearby: Nombre de concurrents proches
        description: Description d√©taill√©e
        advantages: Avantages sp√©cifiques
        disadvantages: Inconv√©nients
        renovation_cost: Co√ªt de r√©novation si n√©cessaire
        special_features: Caract√©ristiques sp√©ciales
    """

    id: str
    name: str
    location_type: LocationType
    restaurant_type: RestaurantType
    price: Decimal
    size: int  # couverts
    condition: CommerceCondition
    equipment_included: List[str]
    rent_monthly: Decimal
    lease_years: int
    foot_traffic: str  # "low", "medium", "high", "very_high"
    competition_nearby: int
    description: str
    advantages: List[str]
    disadvantages: List[str]
    renovation_cost: Decimal = Decimal("0")
    special_features: List[str] = None

    def __post_init__(self):
        if self.special_features is None:
            self.special_features = []

    @property
    def total_initial_cost(self) -> Decimal:
        """Co√ªt total initial (achat + r√©novation)."""
        return self.price + self.renovation_cost

    @property
    def foot_traffic_multiplier(self) -> Decimal:
        """Multiplicateur de client√®le selon le passage."""
        multipliers = {
            "low": Decimal("0.7"),
            "medium": Decimal("1.0"),
            "high": Decimal("1.3"),
            "very_high": Decimal("1.6"),
        }
        return multipliers.get(self.foot_traffic, Decimal("1.0"))

    @property
    def competition_pressure(self) -> Decimal:
        """Pression concurrentielle (0.0 = aucune, 1.0 = tr√®s forte)."""
        if self.competition_nearby == 0:
            return Decimal("0.0")
        elif self.competition_nearby <= 2:
            return Decimal("0.3")
        elif self.competition_nearby <= 4:
            return Decimal("0.6")
        else:
            return Decimal("0.9")

    def display_commerce_details(self, index: int):
        """Affiche les d√©tails d'un commerce."""
        details = [
            f"{index}. {self.name.upper()}",
            f"   üìç {self.location_type.value.replace('_', ' ').title()}",
            f"   üí∞ Prix: {self.price:.0f}‚Ç¨ + {self.renovation_cost:.0f}‚Ç¨ r√©novation",
            f"   üè† {self.size} couverts - √âtat: {self.condition.value}",
            f"   üìà Passage: {self.foot_traffic} - Concurrence: {self.competition_nearby}",
            f"   üè¢ Loyer: {self.rent_monthly:.0f}‚Ç¨/mois - Bail: {self.lease_years} ans",
            "",
            f"   ‚úÖ Avantages: {', '.join(self.advantages[:2])}",
            f"   ‚ö†Ô∏è Inconv√©nients: {', '.join(self.disadvantages[:2])}",
        ]
        print_box(details, style="info")

    def display_confirm_commerce_purchase(self, budget: Decimal) -> None:
        """Confirmation d'achat d'un commerce."""
        remaining_budget = budget - self.total_initial_cost

        confirmation_details = [
            "CONFIRMATION D'ACHAT",
            f"Commerce: {self.name}",
            f"Prix d'achat: {self.price:.0f}‚Ç¨",
            f"R√©novation: {self.renovation_cost:.0f}‚Ç¨",
            f"TOTAL: {self.total_initial_cost:.0f}‚Ç¨",
            f"Budget initial: {budget:.0f}‚Ç¨",
            f"Budget restant: {remaining_budget:.0f}‚Ç¨",
            f"Loyer mensuel: {self.rent_monthly:.0f}‚Ç¨",
            f"Autonomie: {remaining_budget / self.rent_monthly:.1f} mois",
        ]

        if remaining_budget < self.rent_monthly * 3:
            confirmation_details.append("")
            confirmation_details.append("‚ö†Ô∏è ATTENTION: Budget restant faible !")
            style = "warning"
        else:
            style = "info"

        print_box(confirmation_details, style=style)


class CommerceManager:
    """Gestionnaire des fonds de commerce."""

    def __init__(self):
        self.available_locations = self._create_default_locations()

    def _create_default_locations(self) -> List[CommerceLocation]:
        """Cr√©e la liste des fonds de commerce par d√©faut."""
        return [
            # Centre-ville premium
            CommerceLocation(
                id="bistrot_centre_premium",
                name="Le Bistrot du Centre",
                location_type=LocationType.CENTRE_VILLE,
                restaurant_type=RestaurantType.BRASSERIE,
                price=Decimal("95000"),
                size=70,
                condition=CommerceCondition.BON,
                equipment_included=[
                    "Cuisine professionnelle compl√®te",
                    "Salle climatis√©e",
                    "Terrasse 20 places",
                    "Cave √† vin",
                    "Syst√®me de caisse moderne",
                ],
                rent_monthly=Decimal("5200"),
                lease_years=9,
                foot_traffic="very_high",
                competition_nearby=3,
                description="Emplacement exceptionnel en plein c≈ìur de ville avec terrasse. Client√®le d'affaires et touristes.",
                advantages=[
                    "Visibilit√© maximale",
                    "Client√®le ais√©e",
                    "Terrasse tr√®s pris√©e",
                    "Parking public proche",
                ],
                disadvantages=[
                    "Loyer √©lev√©",
                    "Concurrence forte",
                    "Bruit de circulation",
                    "Livraisons compliqu√©es",
                ],
                special_features=["Licence IV", "Terrasse chauff√©e"],
            ),
            # Fast-food √©tudiant
            CommerceLocation(
                id="fast_food_campus",
                name="Quick Campus",
                location_type=LocationType.QUARTIER_ETUDIANT,
                restaurant_type=RestaurantType.FAST,
                price=Decimal("42000"),
                size=45,
                condition=CommerceCondition.CORRECT,
                equipment_included=[
                    "Cuisine fast-food √©quip√©e",
                    "Comptoir de service",
                    "Mobilier moderne",
                    "Syst√®me de commande digitale",
                ],
                rent_monthly=Decimal("2800"),
                lease_years=6,
                foot_traffic="high",
                competition_nearby=2,
                description="Local moderne pr√®s du campus universitaire. Flux constant d'√©tudiants.",
                advantages=[
                    "Client√®le captive √©tudiante",
                    "Horaires √©tendus possibles",
                    "Loyer raisonnable",
                    "Croissance d√©mographique",
                ],
                disadvantages=[
                    "Budget limit√© des clients",
                    "Saisonnalit√© forte",
                    "Concurrence sandwich/kebab",
                    "Vacances scolaires creuses",
                ],
                renovation_cost=Decimal("8000"),
                special_features=["Wifi gratuit", "Prises √©lectriques"],
            ),
            # Restaurant familial banlieue
            CommerceLocation(
                id="restaurant_familial_banlieue",
                name="La Table Familiale",
                location_type=LocationType.BANLIEUE,
                restaurant_type=RestaurantType.CLASSIC,
                price=Decimal("58000"),
                size=55,
                condition=CommerceCondition.BON,
                equipment_included=[
                    "Cuisine traditionnelle",
                    "Salle familiale",
                    "Parking priv√© 15 places",
                    "Jeux pour enfants",
                ],
                rent_monthly=Decimal("3200"),
                lease_years=12,
                foot_traffic="medium",
                competition_nearby=1,
                description="Restaurant familial dans quartier r√©sidentiel calme. Client√®le locale fid√®le.",
                advantages=[
                    "Client√®le fid√®le",
                    "Parking gratuit",
                    "Bail long",
                    "Peu de concurrence",
                ],
                disadvantages=[
                    "Passage limit√©",
                    "D√©pendance aux habitants",
                    "Difficile √† faire conna√Ætre",
                    "Croissance limit√©e",
                ],
                special_features=["Aire de jeux", "Parking priv√©"],
            ),
            # Gastronomique centre historique
            CommerceLocation(
                id="gastro_historique",
                name="L'Auberge du Vieux Port",
                location_type=LocationType.CENTRE_VILLE,
                restaurant_type=RestaurantType.GASTRONOMIQUE,
                price=Decimal("125000"),
                size=35,
                condition=CommerceCondition.EXCELLENT,
                equipment_included=[
                    "Cuisine gastronomique haut de gamme",
                    "Cave vo√ªt√©e 200 bouteilles",
                    "Salle de caract√®re",
                    "Mobilier d'√©poque",
                    "Syst√®me son/√©clairage",
                ],
                rent_monthly=Decimal("4800"),
                lease_years=15,
                foot_traffic="medium",
                competition_nearby=2,
                description="Restaurant de caract√®re dans b√¢timent historique. R√©putation √©tablie.",
                advantages=[
                    "Cachet exceptionnel",
                    "R√©putation √©tablie",
                    "Client√®le haut de gamme",
                    "Bail tr√®s long",
                ],
                disadvantages=[
                    "Investissement important",
                    "Contraintes patrimoniales",
                    "Client√®le exigeante",
                    "Charges √©lev√©es",
                ],
                special_features=["Monument historique", "Cave d'exception"],
            ),
            # Zone commerciale accessible
            CommerceLocation(
                id="brasserie_zone_commerciale",
                name="Brasserie du Centre Commercial",
                location_type=LocationType.ZONE_COMMERCIALE,
                restaurant_type=RestaurantType.BRASSERIE,
                price=Decimal("35000"),
                size=80,
                condition=CommerceCondition.RENOVATION_LEGERE,
                equipment_included=[
                    "Cuisine standard",
                    "Grande salle",
                    "Terrasse couverte",
                ],
                rent_monthly=Decimal("3800"),
                lease_years=8,
                foot_traffic="high",
                competition_nearby=4,
                description="Grande brasserie dans centre commercial. Flux important mais concurrence forte.",
                advantages=[
                    "Gros volume possible",
                    "Parking gratuit",
                    "Flux de chalandise",
                    "Horaires √©tendus",
                ],
                disadvantages=[
                    "Concurrence tr√®s forte",
                    "Ambiance commerciale",
                    "Charges communes",
                    "D√©pendance au centre",
                ],
                renovation_cost=Decimal("15000"),
                special_features=["Acc√®s PMR", "Livraison facile"],
            ),
            # Opportunit√© √† r√©nover
            CommerceLocation(
                id="opportunite_renovation",
                name="Local √† R√©nover - Centre",
                location_type=LocationType.CENTRE_VILLE,
                restaurant_type=RestaurantType.CLASSIC,
                price=Decimal("28000"),
                size=40,
                condition=CommerceCondition.RENOVATION_LOURDE,
                equipment_included=[
                    "Structure de base",
                    "Compteur √©lectrique renforc√©",
                ],
                rent_monthly=Decimal("2400"),
                lease_years=10,
                foot_traffic="high",
                competition_nearby=1,
                description="Ancien restaurant √† r√©nover enti√®rement. Potentiel √©norme pour investisseur motiv√©.",
                advantages=[
                    "Prix d'achat tr√®s bas",
                    "Libert√© totale d'am√©nagement",
                    "Bon emplacement",
                    "Loyer mod√©r√©",
                ],
                disadvantages=[
                    "Gros travaux n√©cessaires",
                    "Investissement total √©lev√©",
                    "D√©lai avant ouverture",
                    "Risques de d√©passement",
                ],
                renovation_cost=Decimal("45000"),
                special_features=["Potentiel cave", "Possibilit√© terrasse"],
            ),
        ]

    def get_available_locations(
        self,
        budget: Decimal,
        location_types: Optional[List[LocationType]] = None,
        restaurant_types: Optional[List[RestaurantType]] = None,
    ) -> List[CommerceLocation]:
        """
        Retourne les emplacements disponibles selon les crit√®res.

        Args:
            budget: Budget disponible
            location_types: Types d'emplacements autoris√©s
            restaurant_types: Types de restaurants autoris√©s

        Returns:
            Liste des emplacements accessibles
        """

        def _matches_criteria(location: CommerceLocation) -> bool:
            """V√©rifie si un emplacement correspond aux crit√®res."""
            if location.total_initial_cost > budget:
                return False
            if location_types and location.location_type not in location_types:
                return False
            if restaurant_types and location.restaurant_type not in restaurant_types:
                return False
            return True

        return [
            location
            for location in self.available_locations
            if _matches_criteria(location)
        ]

    def get_location_by_id(self, location_id: str) -> Optional[CommerceLocation]:
        """Retourne un emplacement par son ID."""
        for location in self.available_locations:
            if location.id == location_id:
                return location
        return None
