#!/usr/bin/env python3
"""
Analyse compl√®te de l'impact des d√©cisions sur les KPIs dans FoodOps.
"""


def analyser_impact_decisions():
    """Analyse l'impact de chaque d√©cision sur les KPIs."""
    print("üìä ANALYSE IMPACT DES D√âCISIONS SUR LES KPIs")
    print("=" * 80)

    decisions_impact = {
        "PRIX": {
            "description": "Prix de vente des plats",
            "impact_direct": {
                "Chiffre d'affaires": "DIRECT (+100%)",
                "Volume clients": "INVERSE (-50% si trop cher)",
                "Marge unitaire": "DIRECT (+100%)",
                "Part de march√©": "INVERSE (-30% si prix √©lev√©)",
            },
            "impact_indirect": {
                "Satisfaction client": "D√©pend du rapport qualit√©/prix",
                "R√©putation": "Long terme selon satisfaction",
                "Positionnement": "D√©finit le segment cible",
            },
            "optimisation": "√âquilibrer volume vs marge selon strat√©gie",
        },
        "QUALIT√â INGR√âDIENTS": {
            "description": "Niveau qualit√© 1‚≠ê √† 5‚≠ê",
            "impact_direct": {
                "Co√ªt mati√®res": "DIRECT (+100% pour luxe vs √©conomique)",
                "Satisfaction client": "DIRECT (+50% pour luxe)",
                "Attractivit√©": "VARIABLE selon segment (+60% foodies)",
                "Temps pr√©paration": "DIRECT (+30% pour luxe)",
            },
            "impact_indirect": {
                "R√©putation": "√âvolution progressive (+3 points sur 10 tours)",
                "Fid√©lisation": "Clients premium plus fid√®les",
                "Prix justifi√©s": "Qualit√© permet prix √©lev√©s",
                "Diff√©renciation": "Avantage concurrentiel durable",
            },
            "optimisation": "Adapter au segment cible et budget",
        },
        "PERSONNEL": {
            "description": "Niveau staffing 0-3",
            "impact_direct": {
                "Capacit√© service": "DIRECT (+30% en renforc√©)",
                "Co√ªt personnel": "DIRECT (+50% en renforc√©)",
                "Qualit√© service": "DIRECT (+20% satisfaction)",
                "Vitesse service": "DIRECT (-20% temps d'attente)",
            },
            "impact_indirect": {
                "R√©putation": "Service impacte satisfaction",
                "Gestion pics": "Personnel renforc√© g√®re mieux",
                "Flexibilit√©": "Adaptation aux variations",
                "Formation": "Personnel exp√©riment√© = qualit√©",
            },
            "optimisation": "√âquilibrer co√ªt vs capacit√© vs qualit√©",
        },
        "SAISONNALIT√â": {
            "description": "Adaptation aux saisons",
            "impact_direct": {
                "Co√ªt ingr√©dients": "VARIABLE (-30% √† +40%)",
                "Qualit√© produits": "VARIABLE (¬±1‚≠ê selon saison)",
                "Demande segments": "VARIABLE (+30% familles √©t√©)",
                "Disponibilit√©": "VARIABLE (ruptures hors saison)",
            },
            "impact_indirect": {
                "Opportunit√©s": "Menus saisonniers attractifs",
                "Communication": "Produits de saison = marketing",
                "Fid√©lisation": "Clients appr√©cient fra√Æcheur",
                "Diff√©renciation": "Avantage vs concurrents",
            },
            "optimisation": "Anticiper et adapter l'offre",
        },
        "GESTION STOCKS": {
            "description": "Rotation FEFO et pertes",
            "impact_direct": {
                "Pertes mati√®res": "DIRECT (2-5% selon gestion)",
                "Co√ªt stockage": "DIRECT (frais conservation)",
                "Disponibilit√©": "DIRECT (ruptures = perte ventes)",
                "Fra√Æcheur": "DIRECT (impact qualit√© per√ßue)",
            },
            "impact_indirect": {
                "R√©putation": "Ruptures = clients m√©contents",
                "Flexibilit√©": "Stocks permettent adaptation",
                "N√©gociation": "Volumes = meilleurs prix",
                "Tr√©sorerie": "Stocks immobilisent capital",
            },
            "optimisation": "Minimiser pertes et ruptures",
        },
    }

    # Affichage d√©taill√©
    for decision, data in decisions_impact.items():
        print(f"\nüéØ {decision}")
        print("=" * 60)
        print(f"üìù {data['description']}")

        print("\nüìà IMPACTS DIRECTS:")
        for kpi, impact in data["impact_direct"].items():
            print(f"   ‚Ä¢ {kpi}: {impact}")

        print("\nüîÑ IMPACTS INDIRECTS:")
        for kpi, impact in data["impact_indirect"].items():
            print(f"   ‚Ä¢ {kpi}: {impact}")

        print("\nüí° OPTIMISATION: {data['optimisation']}")


def analyser_kpis_cles():
    """Analyse les KPIs cl√©s et leurs interd√©pendances."""
    print("\n\nüìä ANALYSE DES KPIs CL√âS")
    print("=" * 60)

    kpis = {
        "CHIFFRE D'AFFAIRES": {
            "formule": "Prix √ó Clients servis",
            "facteurs": ["Prix", "Attractivit√©", "Capacit√©", "R√©putation"],
            "optimisation": "√âquilibrer prix et volume",
            "benchmark": "Croissance 5-15% par tour",
        },
        "MARGE BRUTE": {
            "formule": "CA - Co√ªt mati√®res",
            "facteurs": ["Prix", "Qualit√© ingr√©dients", "Saisonnalit√©", "Pertes"],
            "optimisation": "Optimiser co√ªt mati√®res vs qualit√©",
            "benchmark": "40-70% selon positionnement",
        },
        "PROFIT NET": {
            "formule": "Marge brute - Personnel - Charges fixes",
            "facteurs": ["Marge", "Staffing", "Efficacit√©", "Volumes"],
            "optimisation": "Maximiser efficacit√© op√©rationnelle",
            "benchmark": "10-25% du CA",
        },
        "SATISFACTION CLIENT": {
            "formule": "f(Qualit√©, Prix, Service, Attente)",
            "facteurs": [
                "Qualit√© ingr√©dients",
                "Rapport qualit√©/prix",
                "Personnel",
                "Capacit√©",
            ],
            "optimisation": "Coh√©rence offre vs attentes segment",
            "benchmark": "3.5-4.5/5 selon positionnement",
        },
        "R√âPUTATION": {
            "formule": "√âvolution lente bas√©e sur satisfaction",
            "facteurs": ["Satisfaction", "Constance", "Temps", "Communication"],
            "optimisation": "Constance dans la qualit√©",
            "benchmark": "6-8/10 pour restaurant √©tabli",
        },
        "PART DE MARCH√â": {
            "formule": "Clients servis / Total march√©",
            "facteurs": ["Attractivit√©", "Capacit√©", "Diff√©renciation", "Prix"],
            "optimisation": "Cibler segments sp√©cifiques",
            "benchmark": "15-35% selon nombre concurrents",
        },
    }

    for kpi, data in kpis.items():
        print("\nüìä {kpi}")
        print("-" * 40)
        print(f"üìê Formule: {data['formule']}")
        print(f"üéØ Facteurs cl√©s: {', '.join(data['facteurs'])}")
        print(f"üí° Optimisation: {data['optimisation']}")
        print(f"üìà Benchmark: {data['benchmark']}")


def analyser_strategies_types():
    """Analyse les diff√©rents types de strat√©gies."""
    print("\n\nüéØ ANALYSE DES STRAT√âGIES TYPES")
    print("=" * 60)

    strategies = {
        "√âCONOMIQUE": {
            "description": "Volume maximum, prix bas",
            "decisions": {
                "Prix": "Bas (-20% vs march√©)",
                "Qualit√©": "√âconomique (1-2‚≠ê)",
                "Personnel": "Normal (2/3)",
                "Cible": "√âtudiants, familles budget",
            },
            "kpis_cibles": {
                "Volume clients": "Maximum (30-40% march√©)",
                "Marge unitaire": "Faible (30-40%)",
                "Satisfaction": "Correcte (2.5-3.5/5)",
                "R√©putation": "Stable (4-6/10)",
            },
            "risques": ["Guerre des prix", "Marges faibles", "Vuln√©rabilit√© co√ªts"],
            "avantages": ["Volume √©lev√©", "Barri√®re prix", "March√© large"],
        },
        "PREMIUM": {
            "description": "√âquilibre qualit√©/prix optimis√©",
            "decisions": {
                "Prix": "√âlev√© (+20% vs march√©)",
                "Qualit√©": "Premium (3-4‚≠ê)",
                "Personnel": "Renforc√© (3/3)",
                "Cible": "Familles, foodies occasionnels",
            },
            "kpis_cibles": {
                "Volume clients": "Moyen (20-30% march√©)",
                "Marge unitaire": "√âlev√©e (50-65%)",
                "Satisfaction": "Bonne (3.5-4.5/5)",
                "R√©putation": "Croissante (6-8/10)",
            },
            "risques": ["Concurrence intense", "Attentes √©lev√©es", "Co√ªts variables"],
            "avantages": ["Marge √©lev√©e", "Diff√©renciation", "Fid√©lisation"],
        },
        "LUXE": {
            "description": "Excellence maximale, niche premium",
            "decisions": {
                "Prix": "Tr√®s √©lev√© (+50% vs march√©)",
                "Qualit√©": "Luxe (5‚≠ê)",
                "Personnel": "Expert (3/3 + formation)",
                "Cible": "Foodies, occasions sp√©ciales",
            },
            "kpis_cibles": {
                "Volume clients": "Faible (10-20% march√©)",
                "Marge unitaire": "Tr√®s √©lev√©e (60-80%)",
                "Satisfaction": "Excellente (4.5-5/5)",
                "R√©putation": "√âlev√©e (8-10/10)",
            },
            "risques": ["March√© restreint", "Co√ªts √©lev√©s", "Sensibilit√© crise"],
            "avantages": ["Marge maximale", "Prestige", "Fid√©lit√© forte"],
        },
    }

    for strategie, data in strategies.items():
        print("\nüéØ STRAT√âGIE {strategie}")
        print("=" * 50)
        print(f"üìù {data['description']}")

        print("\nüéÆ D√âCISIONS CL√âS:")
        for decision, valeur in data["decisions"].items():
            print(f"   ‚Ä¢ {decision}: {valeur}")

        print("\nüìä KPIs CIBLES:")
        for kpi, valeur in data["kpis_cibles"].items():
            print(f"   ‚Ä¢ {kpi}: {valeur}")

        print("\n‚ö†Ô∏è RISQUES: {', '.join(data['risques'])}")
        print(f"‚úÖ AVANTAGES: {', '.join(data['avantages'])}")


def analyser_interdependances():
    """Analyse les interd√©pendances entre d√©cisions."""
    print("\n\nüîÑ INTERD√âPENDANCES ENTRE D√âCISIONS")
    print("=" * 60)

    print("\nüéØ COH√âRENCE STRAT√âGIQUE REQUISE:")
    print("-" * 40)

    coherences = [
        "Prix √©lev√© ‚Üí Qualit√© √©lev√©e (sinon satisfaction chute)",
        "Qualit√© luxe ‚Üí Personnel expert (sinon gaspillage)",
        "Volume √©lev√© ‚Üí Capacit√© suffisante (sinon clients perdus)",
        "Saisonnalit√© ‚Üí Adaptation menu (sinon co√ªts √©lev√©s)",
        "R√©putation √©lev√©e ‚Üí Constance qualit√© (sinon chute brutale)",
    ]

    for coherence in coherences:
        print(f"   ‚Ä¢ {coherence}")

    print("\n‚ö†Ô∏è PI√àGES √Ä √âVITER:")
    print("-" * 30)

    pieges = [
        "Prix bas + Qualit√© luxe = Perte assur√©e",
        "Personnel l√©ger + Volume √©lev√© = Service d√©grad√©",
        "Stocks excessifs + Rotation lente = Pertes importantes",
        "Qualit√© variable = R√©putation instable",
        "Ignorer saisonnalit√© = Co√ªts subis vs optimis√©s",
    ]

    for piege in pieges:
        print(f"   ‚ùå {piege}")

    print("\n‚úÖ SYNERGIES POSITIVES:")
    print("-" * 30)

    synergies = [
        "Qualit√© premium + Prix justifi√© = Marge optimale",
        "Saisonnalit√© + Communication = Diff√©renciation",
        "Personnel expert + Qualit√© luxe = Excellence per√ßue",
        "R√©putation √©lev√©e + Prix premium = Acceptation client",
        "Stocks optimis√©s + Qualit√© constante = Efficacit√© maximale",
    ]

    for synergie in synergies:
        print(f"   ‚úÖ {synergie}")


def main():
    """Analyse compl√®te de l'impact des d√©cisions."""
    analyser_impact_decisions()
    analyser_kpis_cles()
    analyser_strategies_types()
    analyser_interdependances()

    print("\n\nüéâ CONCLUSIONS CL√âS")
    print("=" * 40)
    print("‚úÖ Chaque d√©cision impacte plusieurs KPIs")
    print("‚úÖ Coh√©rence strat√©gique = Cl√© du succ√®s")
    print("‚úÖ Interd√©pendances fortes entre d√©cisions")
    print("‚úÖ Plusieurs strat√©gies viables selon march√©")
    print("‚úÖ Optimisation continue n√©cessaire")
    print("")
    print("üéØ Le jeu enseigne la complexit√© r√©elle")
    print("   de la gestion d'entreprise !")


if __name__ == "__main__":
    main()
