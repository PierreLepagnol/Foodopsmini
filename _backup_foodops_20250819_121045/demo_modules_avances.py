#!/usr/bin/env python3
"""
D√©monstration des nouveaux modules avanc√©s : Marketing et Finance.
"""

import sys
import os

sys.path.append(os.path.join(os.path.dirname(__file__), "src"))

from decimal import Decimal
from datetime import date, timedelta
from src.foodops_pro.domain.marketing import MarketingManager, CampaignType
from src.foodops_pro.domain.finance_advanced import FinanceManager, TransactionType


def demo_marketing_system():
    """D√©monstration du syst√®me marketing."""
    print("üìà D√âMONSTRATION SYST√àME MARKETING")
    print("=" * 70)

    marketing = MarketingManager()

    # Cr√©ation de campagnes
    print("\nüéØ CR√âATION DE CAMPAGNES MARKETING:")

    # Campagne r√©seaux sociaux
    social_campaign = marketing.create_campaign(
        name="Promotion √ât√© 2024",
        campaign_type=CampaignType.SOCIAL_MEDIA,
        budget=Decimal("350"),
        duration_days=7,
        target_segments=["√©tudiants", "jeunes_actifs"],
    )

    # Campagne √©v√©nement
    event_campaign = marketing.create_campaign(
        name="Soir√©e D√©gustation",
        campaign_type=CampaignType.EVENTS,
        budget=Decimal("600"),
        duration_days=1,
        target_segments=["foodies", "familles"],
    )

    # Programme fid√©lit√©
    loyalty_campaign = marketing.create_campaign(
        name="Carte Fid√©lit√©",
        campaign_type=CampaignType.LOYALTY_PROGRAM,
        budget=Decimal("900"),
        duration_days=30,
        target_segments=["tous"],
    )

    campaigns = [social_campaign, event_campaign, loyalty_campaign]

    for campaign in campaigns:
        print(f"\nüìã {campaign.name}:")
        print(f"   Type: {campaign.type.value}")
        print(f"   Budget: {campaign.budget}‚Ç¨")
        print(f"   Dur√©e: {campaign.duration_days} jours")
        print(f"   Port√©e attendue: {campaign.expected_reach:,} personnes")
        print(f"   Conversions attendues: {campaign.expected_new_customers}")
        print(f"   Co√ªt par acquisition: {campaign.cost_per_acquisition:.2f}‚Ç¨")
        print(f"   Co√ªt quotidien: {campaign.daily_cost:.2f}‚Ç¨")

    # Lancement des campagnes
    print(f"\nüöÄ LANCEMENT DES CAMPAGNES:")
    start_date = date.today()

    for campaign in campaigns:
        success = marketing.launch_campaign(campaign.id, start_date)
        status = "‚úÖ Lanc√©e" if success else "‚ùå √âchec"
        print(f"   {campaign.name}: {status}")

    # Impact quotidien
    print(f"\nüìä IMPACT MARKETING QUOTIDIEN:")
    for day in range(1, 8):  # 7 jours
        current_date = start_date + timedelta(days=day - 1)
        impact = marketing.calculate_daily_marketing_impact(current_date)

        print(f"\n   Jour {day} ({current_date.strftime('%d/%m')}):")
        print(f"     Port√©e: {impact['total_reach']:,} personnes")
        print(f"     Conversions: {impact['total_conversions']} nouveaux clients")
        print(f"     Co√ªt: {impact['total_cost']:.2f}‚Ç¨")
        print(f"     Campagnes actives: {impact['active_campaigns']}")

        if impact["segment_impact"]:
            print(f"     Impact par segment:")
            for segment, conv in impact["segment_impact"].items():
                print(f"       ‚Ä¢ {segment}: {conv:.1f} conversions")

    # Avis clients
    print(f"\n‚≠ê SIMULATION AVIS CLIENTS:")
    reviews_data = [
        ("client_001", 5, "Excellent burger, service rapide!", "google"),
        ("client_002", 4, "Tr√®s bon, je recommande", "tripadvisor"),
        ("client_003", 3, "Correct sans plus", "facebook"),
        ("client_004", 5, "Parfait ! Qualit√© au top", "google"),
        ("client_005", 2, "Service lent, d√©√ßu", "yelp"),
        ("client_006", 4, "Bon rapport qualit√©/prix", "google"),
    ]

    for customer_id, rating, comment, platform in reviews_data:
        marketing.add_customer_review(
            customer_id, "resto_001", Decimal(str(rating)), comment, platform
        )

    # R√©sum√© r√©putation
    reputation = marketing.get_reputation_summary()
    print(f"\nüìä R√âSUM√â R√âPUTATION:")
    print(f"   Note moyenne: {reputation['average_rating']:.1f}/5")
    print(f"   Nombre d'avis: {reputation['total_reviews']}")
    print(f"   Tendance r√©cente: {reputation['recent_trend']}")
    print(f"   Distribution des notes:")
    for note, count in reputation["rating_distribution"].items():
        stars = "‚≠ê" * note
        print(f"     {stars}: {count} avis")

    # ROI Marketing
    roi = marketing.get_marketing_roi()
    print(f"\nüí∞ ROI MARKETING:")
    print(f"   Investissement total: {roi['total_spend']:.2f}‚Ç¨")
    print(f"   Revenus estim√©s: {roi['estimated_revenue']:.2f}‚Ç¨")
    print(f"   Ratio ROI: {roi['roi_ratio']:.1f}x")
    print(f"   Campagnes termin√©es: {roi['campaigns_completed']}")


def demo_finance_system():
    """D√©monstration du syst√®me finance avanc√©."""
    print(f"\n\nüí∞ D√âMONSTRATION SYST√àME FINANCE AVANC√â")
    print("=" * 70)

    finance = FinanceManager()

    # Transactions d'exemple
    print(f"\nüìù ENREGISTREMENT DE TRANSACTIONS:")

    transactions_data = [
        ("Vente d√©jeuner", "sale", Decimal("450.00")),
        ("Achat viande", "purchase", Decimal("180.00")),
        ("Salaire chef", "salary", Decimal("2200.00")),
        ("Campagne marketing", "marketing", Decimal("350.00")),
        ("Vente d√Æner", "sale", Decimal("680.00")),
        ("Achat l√©gumes", "purchase", Decimal("120.00")),
    ]

    for desc, t_type, amount in transactions_data:
        if t_type == "sale":
            transaction = finance.record_sale(amount)
        elif t_type == "purchase":
            transaction = finance.record_purchase(amount, "Fournisseur XYZ")
        elif t_type == "salary":
            transaction = finance.record_salary_payment(amount, "Chef Dupont")
        elif t_type == "marketing":
            transaction = finance.record_marketing_expense(amount, "Promotion √ât√©")

        print(f"   ‚úÖ {desc}: {amount}‚Ç¨ (ID: {transaction.id})")

    # Bilan comptable
    print(f"\nüìä BILAN COMPTABLE:")
    balance_sheet = finance.get_balance_sheet()

    print(f"\n   ACTIFS:")
    for account, balance in balance_sheet["assets"].items():
        if balance != 0:
            print(f"     ‚Ä¢ {account}: {balance:,.2f}‚Ç¨")
    print(f"   TOTAL ACTIFS: {balance_sheet['totals']['assets']:,.2f}‚Ç¨")

    print(f"\n   PASSIFS:")
    for account, balance in balance_sheet["liabilities"].items():
        if balance != 0:
            print(f"     ‚Ä¢ {account}: {balance:,.2f}‚Ç¨")
    print(f"   TOTAL PASSIFS: {balance_sheet['totals']['liabilities']:,.2f}‚Ç¨")

    print(f"\n   CAPITAUX PROPRES:")
    for account, balance in balance_sheet["equity"].items():
        if balance != 0:
            print(f"     ‚Ä¢ {account}: {balance:,.2f}‚Ç¨")
    print(f"   TOTAL CAPITAUX: {balance_sheet['totals']['equity']:,.2f}‚Ç¨")

    # Compte de r√©sultat
    print(f"\nüìà COMPTE DE R√âSULTAT:")
    income_statement = finance.get_income_statement()

    print(f"\n   PRODUITS:")
    for account, amount in income_statement["revenues"].items():
        if amount != 0:
            print(f"     ‚Ä¢ {account}: {amount:,.2f}‚Ç¨")
    print(f"   TOTAL PRODUITS: {income_statement['totals']['revenues']:,.2f}‚Ç¨")

    print(f"\n   CHARGES:")
    for account, amount in income_statement["expenses"].items():
        if amount != 0:
            print(f"     ‚Ä¢ {account}: {amount:,.2f}‚Ç¨")
    print(f"   TOTAL CHARGES: {income_statement['totals']['expenses']:,.2f}‚Ç¨")

    print(f"\n   R√âSULTAT NET: {income_statement['totals']['net_profit']:,.2f}‚Ç¨")
    print(f"   MARGE NETTE: {income_statement['margins']['net_margin_rate']:.1%}")

    # Analyse de rentabilit√© par recette
    print(f"\nüçΩÔ∏è ANALYSE RENTABILIT√â PAR RECETTE:")

    recipes_data = [
        (
            "burger_001",
            "Burger Classic",
            Decimal("12.50"),
            Decimal("4.20"),
            Decimal("2.80"),
            Decimal("1.50"),
        ),
        (
            "pizza_001",
            "Pizza Margherita",
            Decimal("11.00"),
            Decimal("3.80"),
            Decimal("2.20"),
            Decimal("1.40"),
        ),
        (
            "salad_001",
            "Salade C√©sar",
            Decimal("9.80"),
            Decimal("3.10"),
            Decimal("1.90"),
            Decimal("1.20"),
        ),
        (
            "pasta_001",
            "P√¢tes Carbonara",
            Decimal("10.50"),
            Decimal("2.90"),
            Decimal("2.10"),
            Decimal("1.30"),
        ),
    ]

    for (
        recipe_id,
        name,
        price,
        ingredient_cost,
        labor_cost,
        overhead_cost,
    ) in recipes_data:
        finance.update_recipe_profitability(
            recipe_id, name, price, ingredient_cost, labor_cost, overhead_cost
        )

        # Simuler des ventes
        import random

        quantity_sold = random.randint(50, 150)
        for _ in range(quantity_sold):
            finance.record_recipe_sale(recipe_id)

    profitability_report = finance.get_recipe_profitability_report()

    print(
        f"\n   {'Recette':<20} | {'Prix':<8} | {'Co√ªt':<8} | {'Marge':<8} | {'Taux':<8} | {'Volume':<8} | {'Profit':<10}"
    )
    print(
        f"   {'-' * 20} | {'-' * 8} | {'-' * 8} | {'-' * 8} | {'-' * 8} | {'-' * 8} | {'-' * 10}"
    )

    for recipe in profitability_report:
        print(
            f"   {recipe['recipe_name']:<20} | {recipe['selling_price']:>6.2f}‚Ç¨ | {recipe['total_cost']:>6.2f}‚Ç¨ | {recipe['unit_margin']:>6.2f}‚Ç¨ | {recipe['margin_rate']:>6.1%} | {recipe['quantity_sold']:>8} | {recipe['total_profit']:>8.2f}‚Ç¨"
        )

    # Pr√©vision de tr√©sorerie
    print(f"\nüí∞ PR√âVISION DE TR√âSORERIE (7 jours):")
    cash_flow = finance.get_cash_flow_forecast(7)

    print(f"   Tr√©sorerie actuelle: {cash_flow['current_cash']:,.2f}‚Ç¨")
    print(f"   Flux quotidien moyen: {cash_flow['daily_net_flow']:+,.2f}‚Ç¨")

    print(f"\n   {'Jour':<6} | {'Date':<12} | {'Position':<12} | {'Flux':<10}")
    print(f"   {'-' * 6} | {'-' * 12} | {'-' * 12} | {'-' * 10}")

    for forecast in cash_flow["forecast"]:
        print(
            f"   J+{forecast['day']:<4} | {forecast['date'].strftime('%d/%m/%Y'):<12} | {forecast['cash_position']:>10.2f}‚Ç¨ | {forecast['daily_flow']:>+8.2f}‚Ç¨"
        )

    print(f"\n   Position minimale: {cash_flow['min_cash_position']:,.2f}‚Ç¨")
    print(f"   Position maximale: {cash_flow['max_cash_position']:,.2f}‚Ç¨")

    # Ratios financiers
    print(f"\nüìä RATIOS FINANCIERS:")
    ratios = finance.get_financial_ratios()

    print(f"   Liquidit√©: {ratios['current_ratio']:.2f}")
    print(f"   Marge nette: {ratios['net_margin']:.1%}")
    print(f"   ROE (Rentabilit√© capitaux): {ratios['roe']:.1%}")
    print(f"   ROA (Rentabilit√© actifs): {ratios['roa']:.1%}")
    print(f"   Taux d'endettement: {ratios['debt_ratio']:.1%}")


def demo_integration_complete():
    """D√©monstration de l'int√©gration compl√®te."""
    print(f"\n\nüéÆ INT√âGRATION MARKETING + FINANCE")
    print("=" * 60)

    print(f"\nüí° SC√âNARIO: Restaurant 'Chez Mario' - Strat√©gie de croissance")
    print(f"   Objectif: Augmenter CA de 20% en 3 mois")
    print(f"   Budget marketing: 2,000‚Ç¨")
    print(f"   Investissement √©quipement: 5,000‚Ç¨")

    print(f"\nüìà PLAN D'ACTION INT√âGR√â:")
    print(f"   1. MARKETING:")
    print(f"      ‚Ä¢ Campagne r√©seaux sociaux: 700‚Ç¨ (14 jours)")
    print(f"      ‚Ä¢ Programme fid√©lit√©: 900‚Ç¨ (30 jours)")
    print(f"      ‚Ä¢ √âv√©nement d√©gustation: 400‚Ç¨ (1 jour)")
    print(f"      ‚Üí Impact attendu: +150 nouveaux clients/mois")

    print(f"\n   2. FINANCE:")
    print(f"      ‚Ä¢ Investissement four professionnel: 5,000‚Ç¨")
    print(f"      ‚Ä¢ Financement: Pr√™t bancaire 4.5%")
    print(f"      ‚Ä¢ ROI attendu: 18 mois")
    print(f"      ‚Üí Impact: +20% capacit√© production")

    print(f"\n   3. R√âSULTATS ATTENDUS:")
    print(f"      ‚Ä¢ CA mensuel: 28,750‚Ç¨ ‚Üí 34,500‚Ç¨ (+20%)")
    print(f"      ‚Ä¢ Nouveaux clients: +150/mois")
    print(f"      ‚Ä¢ Marge nette: 15.0% ‚Üí 17.2%")
    print(f"      ‚Ä¢ R√©putation: 4.2/5 ‚Üí 4.6/5")

    print(f"\nüìä SUIVI KPIs:")
    print(f"   ‚Ä¢ ROI marketing: Suivi hebdomadaire")
    print(f"   ‚Ä¢ Tr√©sorerie: Pr√©vision quotidienne")
    print(f"   ‚Ä¢ Rentabilit√© plats: Analyse mensuelle")
    print(f"   ‚Ä¢ Satisfaction client: Monitoring continu")


def main():
    """D√©monstration compl√®te des modules avanc√©s."""
    print("üéÆ D√âMONSTRATION MODULES AVANC√âS FOODOPS PRO")
    print("=" * 80)

    try:
        demo_marketing_system()
        demo_finance_system()
        demo_integration_complete()

        print(f"\n\nüéâ MODULES AVANC√âS OP√âRATIONNELS !")
        print("=" * 60)
        print("‚úÖ Marketing & Communication complet")
        print("‚úÖ Finance avanc√©e avec comptabilit√©")
        print("‚úÖ Analyse rentabilit√© par recette")
        print("‚úÖ Pr√©visions de tr√©sorerie")
        print("‚úÖ Gestion r√©putation en ligne")
        print("‚úÖ ROI marketing mesurable")
        print("‚úÖ Ratios financiers professionnels")
        print("")
        print("üéØ FoodOps Pro offre maintenant un niveau")
        print("   de r√©alisme professionnel complet !")

    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    main()
